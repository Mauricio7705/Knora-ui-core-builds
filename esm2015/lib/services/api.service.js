import { Inject, Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs/internal/observable/throwError';
import { catchError, map } from 'rxjs/operators';
import { ApiServiceError, ApiServiceResult, KuiCoreConfig } from '../declarations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class ApiService {
    constructor(http, config) {
        this.http = http;
        this.config = config;
        /**
         *  if is loading, set it true;
         *  it can be used in components
         *  for progress loader element
         */
        this.loading = false;
    }
    /**
     * GET
     *
     * @param {string} path
     * @returns {Observable<any>}
     */
    httpGet(path, params) {
        this.loading = true;
        return this.http.get(this.config.api + path, { observe: 'response', params: params }).pipe(map((response) => {
            this.loading = false;
            const result = new ApiServiceResult();
            result.status = response.status;
            result.statusText = response.statusText;
            result.url = path;
            result.body = response.body;
            return result;
        }), catchError((error) => {
            this.loading = false;
            return this.handleRequestError(error);
        }));
    }
    /**
     * POST
     *
     * @param {string} path
     * @param body
     * @returns {Observable<any>}
     */
    httpPost(path, body) {
        this.loading = true;
        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication
        return this.http.post(this.config.api + path, body, { observe: 'response' }).pipe(map((response) => {
            this.loading = false;
            const result = new ApiServiceResult();
            result.status = response.status;
            result.statusText = response.statusText;
            result.url = path;
            result.body = response.body;
            return result;
        }), catchError((error) => {
            this.loading = false;
            // console.error(error);
            return this.handleRequestError(error);
        }));
    }
    /**
     * PUT
     *
     * @param {string} path
     * @param body
     * @returns {Observable<any>}
     */
    httpPut(path, body) {
        this.loading = true;
        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication
        return this.http.put(this.config.api + path, body, { observe: 'response' }).pipe(map((response) => {
            this.loading = false;
            // console.log(response);
            const result = new ApiServiceResult();
            result.status = response.status;
            result.statusText = response.statusText;
            result.url = path;
            result.body = response.body;
            return result;
        }), catchError((error) => {
            this.loading = false;
            // console.error(error);
            return this.handleRequestError(error);
        }));
    }
    /**
     * DELETE
     *
     * @param {string} path
     * @returns {Observable<any>}
     */
    httpDelete(path) {
        this.loading = true;
        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication
        return this.http.delete(this.config.api + path, { observe: 'response' }).pipe(map((response) => {
            this.loading = false;
            // console.log(response);
            const result = new ApiServiceResult();
            result.status = response.status;
            result.statusText = response.statusText;
            result.url = path;
            result.body = response.body;
            return result;
        }), catchError((error) => {
            this.loading = false;
            // console.error(error);
            return this.handleRequestError(error);
        }));
    }
    /**
     * handle request error in case of server error
     *
     * @param {HttpErrorResponse} error
     * @returns {Observable<ApiServiceError>}
     */
    handleRequestError(error) {
        // console.error(error);
        const serviceError = new ApiServiceError();
        serviceError.status = error.status;
        serviceError.statusText = error.statusText;
        serviceError.errorInfo = error.message;
        serviceError.url = error.url;
        return throwError(serviceError);
    }
    /**
     * handle json error in case of type error in json response (json2typescript)
     *
     * @param error
     * @returns {Observable<ApiServiceError>}
     */
    handleJsonError(error) {
        if (error instanceof ApiServiceError)
            return throwError(error);
        const serviceError = new ApiServiceError();
        serviceError.status = -1;
        serviceError.statusText = 'Invalid JSON';
        serviceError.errorInfo = error;
        serviceError.url = '';
        return throwError(serviceError);
    }
}
ApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
ApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: KuiCoreConfig, decorators: [{ type: Inject, args: ['config',] }] }
];
ApiService.ngInjectableDef = i0.defineInjectable({ factory: function ApiService_Factory() { return new ApiService(i0.inject(i1.HttpClient), i0.inject("config")); }, token: ApiService, providedIn: "root" });

//# sourceMappingURL=data:application/json;base64,