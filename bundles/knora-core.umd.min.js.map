{"version":3,"sources":["null","ng://@knora/core/lib/declarations/api/knora-constants.ts","ng://@knora/core/lib/declarations/core.config.ts","ng://@knora/core/lib/declarations/api-service-result.ts","ng://@knora/core/lib/declarations/api-service-error.ts","ng://@knora/core/lib/declarations/utils.ts","ng://@knora/core/lib/declarations/api/shared/date.ts","ng://@knora/core/lib/declarations/api/shared/strings.ts","ng://@knora/core/lib/services/v2/ontology-cache.service.ts","ng://@knora/core/lib/declarations/api/admin/authentication/authentication-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project.ts","ng://@knora/core/lib/declarations/api/admin/groups/group.ts","ng://@knora/core/lib/declarations/api/admin/groups/group-response.ts","ng://@knora/core/lib/declarations/api/admin/groups/groups-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node.ts","ng://@knora/core/lib/declarations/api/admin/lists/list.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-node-info-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/list-response.ts","ng://@knora/core/lib/declarations/api/admin/lists/lists-response.ts","ng://@knora/core/lib/declarations/api/admin/ontologies/ontology-info-short.ts","ng://@knora/core/lib/declarations/api/admin/permissions/permission-data.ts","ng://@knora/core/lib/declarations/api/admin/users/user.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-members-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/project-response.ts","ng://@knora/core/lib/declarations/api/admin/projects/projects-response.ts","ng://@knora/core/lib/declarations/api/admin/users/current-user.ts","ng://@knora/core/lib/declarations/api/admin/users/users-response.ts","ng://@knora/core/lib/declarations/api/admin/users/user-response.ts","ng://@knora/core/lib/declarations/api/v2/properties/read-property-item.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resource.ts","ng://@knora/core/lib/services/api.service.ts","ng://@knora/core/lib/services/v2/ontology.service.ts","ng://@knora/core/lib/declarations/api/v2/resources/read-resources-sequence.ts","ng://@knora/core/lib/declarations/api/v2/count-query/count-query-result.ts","ng://@knora/core/lib/declarations/api/v2/still-image/still-image-representation.ts","ng://@knora/core/lib/declarations/api/v2/still-image/image-region.ts","ng://@knora/core/lib/core.module.ts","ng://@knora/core/lib/services/admin/groups.service.ts","ng://@knora/core/lib/services/admin/lists.service.ts","ng://@knora/core/lib/services/admin/projects.service.ts","ng://@knora/core/lib/services/admin/users.service.ts","ng://@knora/core/lib/services/admin/language.service.ts","ng://@knora/core/lib/services/admin/status-msg.service.ts","ng://@knora/core/lib/services/v2/convert-jsonld.ts","ng://@knora/core/lib/services/v2/resource.service.ts","ng://@knora/core/lib/services/v2/search.service.ts","ng://@knora/core/lib/services/v2/incoming.service.ts","ng://@knora/core/lib/services/v2/search-params.service.ts","ng://@knora/core/lib/services/v2/grav-search.service.ts","ng://@knora/core/lib/services/v2/store.service.ts","ng://@knora/core/lib/services/v2/basic-ontology.service.ts","ng://@knora/core/lib/services/v2/resource-types.service.ts","ng://@knora/core/lib/declarations/api/operators.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","KnoraSchema","KuiCoreConfig","name","undefined","app","api","media","tslib_1.__decorate","JsonProperty","String","JsonObject","ApiServiceResult","status","statusText","url","getBody","classObject","jsonConvert","deserialize","body","JsonConvert","OperationMode","ENABLE","ValueCheckingMode","ALLOW_NULL","ApiServiceError","errorInfo","KnoraConstants","KnoraApi","PathSeparator","SystemProjectIRI","KnoraBase","KnoraOntologyPath","SystemAdminGroupIRI","ProjectAdminGroupIRI","ProjectMemberGroupIRI","KnoraApiV2WithValueObjectPath","KnoraApiV2SimplePath","SalsahGuiOrder","SalsahGuiOntology","StandoffOntology","Resource","TextValue","IntValue","BooleanValue","UriValue","DecimalValue","DateValue","ColorValue","GeomValue","ListValue","IntervalValue","LinkValue","GeonameValue","FileValue","AudioFileValue","DDDFileValue","DocumentFileValue","StillImageFileValue","MovingImageFileValue","TextFileValue","IsResourceClass","IsValueClass","ForbiddenResource","XMLToStandoffMapping","ListNode","ObjectType","ResourceIcon","isEditable","isLinkProperty","isLinkValueProperty","hasGeometry","schemaName","schemaNumberOfItems","schemaItemListElement","RdfProperty","RdfsLabel","RdfsSchema","RdfsComment","RdfsSubclassOf","subPropertyOf","OwlClass","owl","OwlObjectProperty","OwlDatatypeProperty","OwlAnnotationProperty","OwlOnProperty","OwlMaxCardinality","OwlMinCardinality","OwlCardinality","OwlRestriction","creationDate","lastModificationDate","hasPermissions","attachedToProject","attachedToUser","Region","ReadTextValueAsHtml","ReadTextValueAsString","ReadTextValueAsXml","ReadDateValue","ReadLinkValue","ReadIntegerValue","ReadDecimalValue","ReadStillImageFileValue","ReadTextFileValue","ReadGeomValue","ReadColorValue","ReadUriValue","ReadBooleanValue","ReadIntervalValue","ReadListValue","valueAsString","textValueAsHtml","textValueAsXml","textValueHasMapping","hasStandoffLinkToValue","dateValueHasStartYear","dateValueHasEndYear","dateValueHasStartEra","dateValueHasEndEra","dateValueHasStartMonth","dateValueHasEndMonth","dateValueHasStartDay","dateValueHasEndDay","dateValueHasCalendar","linkValueHasTarget","linkValueHasSource","linkValueHasSourceIri","linkValueHasTargetIri","integerValueAsInteger","decimalValueAsDecimal","fileValueAsUrl","fileValueIsPreview","fileValueHasFilename","hasStillImageFileValue","stillImageFileValueHasDimX","stillImageFileValueHasDimY","stillImageFileValueHasIIIFBaseUrl","colorValueAsColor","geometryValueAsGeometry","uriValueAsUri","booleanValueAsBoolean","intervalValueHasStart","intervalValueHasEnd","listValueAsListNode","listValueAsListNodeLabel","xsdString","Xsd","xsdBoolean","xsdInteger","xsdDecimal","xsdUri","resourceSimple","dateSimple","intervalSimple","geomSimple","colorSimple","geonameSimple","fileSimple","matchFunction","EqualsComparisonOperator","EqualsComparisonLabel","NotEqualsComparisonOperator","NotEqualsComparisonLabel","GreaterThanComparisonOperator","GreaterThanComparisonLabel","GreaterThanEqualsComparisonOperator","GreaterThanEqualsComparisonLabel","LessThanComparisonOperator","LessThanComparisonLabel","LessThanEqualsComparisonOperator","LessThanQualsComparisonLabel","ExistsComparisonOperator","ExistsComparisonLabel","LikeComparisonOperator","LikeComparisonLabel","MatchComparisonOperator","MatchComparisonLabel","SalsahLink","RefMarker","GNDPrefix","GNDResolver","VIAFPrefix","VIAFResolver","Precision","Utils","getOntologyIriFromEntityIri","entityIri","segments","split","console","error","convertComplexKnoraApiEntityIritoSimple","complexEntityIri","RegexEmail","RegexUsername","RegexUrl","RegexPassword","RegexHex","RegexShortname","filterOutDuplicates","elem","index","self","indexOf","StringLiteral","language","CardinalityOccurrence","DateSalsah","calendar","era","year","month","day","precision","yearPrecision","monthPrecision","dayPrecision","getDateAsStringWithoutCalendar","dateString","toString","separator","getDateAsString","DateRangeSalsah","start","end","AuthenticationResponse","token","Project","id","shortname","shortcode","longname","description","keywords","logo","institution","ontologies","selfjoin","Boolean","Group","project","GroupResponse","group","GroupsResponse","groups","ListInfo","projectIri","labels","comments","label","children","level","position","ListNode_1","Number","List","listinfo","ListInfoResponse","ListNodeInfo","isRootNode","ListNodeInfoResponse","nodeinfo","ListResponse","list","ListsResponse","lists","OntologyInfoShort","ontologyIri","ontologyName","PermissionData","groupsPerProject","administrativePermissionsPerProject","User","email","username","password","givenName","familyName","lang","projects","sessionId","permissions","systemAdmin","ProjectMembersResponse","members","ProjectResponse","ProjectsResponse","CurrentUser","jwt","sysAdmin","UsersResponse","users","UserResponse","user","ReadTextValue","type","_super","propIri","str","_this","tslib_1.__extends","getClassName","getContent","ReferredResourcesByStandoffLink","html","referredResources","getReferredResourceInfo","resourceIri","ontologyInfo","resClassLabel","getLabelForResourceClass","xml","mappingIri","startYear","endYear","startEra","endEra","startMonth","endMonth","startDay","endDay","getDateSalsah","referredResourceIri","referredResource","integer","decimal","imageFilename","imageServerIIIFBaseURL","imagePath","dimX","dimY","isPreview","endsWith","makeIIIFUrl","reduceFactor","percentage","Math","floor","textFilename","textFileURL","colorHex","Point2D","x","y","RegionGeometry","lineColor","lineWidth","points","radius","geometryString","geometryJSON","JSON","parse","_b","tslib_1.__values","_c","point","push","geometry","uri","bool","intervalStart","intervalEnd","listNodeIri","listNodeLabel","ReadResource","incomingRegions","incomingStillImageRepresentations","incomingLinks","stillImageRepresentationsToDisplay","properties","jsonld","require","ApiService","http","config","loading","httpGet","path","params","get","observe","pipe","map","response","result","catchError","handleRequestError","processJSONLD","resourceResponse","resPromise","promises","compact","from","httpPost","post","httpPut","put","httpDelete","delete","serviceError","message","throwError","handleJsonError","Injectable","args","providedIn","HttpClient","Inject","OntologyService","getOntologiesMetadata","getAllOntologies","getProjectOntologies","encodeURIComponent","getAllEntityDefinitionsForOntologies","getResourceClasses","resourceClassIris","Observable","observer","resClassUriEnc","forEach","resClassIri","getProperties","propertyIris","propertiesUriEnc","createOntology","data","ontology","knora-api:ontologyName","knora-api:attachedToProject","@id","rdfs:label","@context","rdfs","knora-api","OntologyCacheError","Error","OntologyMetadata","Cardinality","occurrence","property","ResourceClass","icon","comment","cardinalities","ResourceClasses","Property","objectType","Properties","ResourceClassIrisForOntology","OntologyCache","resourceClassIrisForOntology","resourceClasses","OntologyInformation","resourceClassesForOntology","sortFunc","a","labelA","toLowerCase","labelB","updateOntologyInformation","newResourceClassesForOntology","getResourceClassForOntology","newResClassForOntology","newResourceClasses","newResClass","newProperties","newProp","getResourceClassesAsArray","sortAsc","resClasses","resClass","sort","reverse","resClassDef","log","getPropertiesAsArray","prop","getLabelForProperty","propDef","OntologyCacheService","_ontologyService","excludedOntologies","excludedProperties","nonResourceClasses","cacheOntology","getOntologiesMetadataFromKnora","mergeMap","ontRes","ontPromise","getAllEntityDefinitionsForOntologyFromKnora","convertAndWriteOntologiesMetadataToCache","getAllOntologiesMetadataFromCache","getResourceClassIrisFromOntologyResponse","classDefinitions","classDefinitions_1","classDefinitions_1_1","classDef","classIri","convertAndWriteAllEntityDefinitionsForOntologyToCache","graph","classDefs","filter","entity","propertyDefs","entityType","convertAndWriteEntityDefinitionsToCache","getOntologyInformationFromCache","ontologyIris","allResourceClassIris","ontologyIris_1","ontologyIris_1_1","concat","getResourceClassDefinitions","resClassDefs","resourceClassDefinitions","propertyClassDefinitions","resourceClassDefinitions_1","resourceClassDefinitions_1_1","subclassOfCollection","isArray","subclassOfCollection_1","subclassOfCollection_1_1","curCard","newCard","minCard","card","TypeError","maxCard","resClassObj","convertAndWriteKnoraPropertyDefinitionsToOntologyCache","getResourceClassDefinitionsFromCache","resClassIris","getPropertyDefinitions","propDefs","propertyDefinitionsFromKnora","propertyDefinitionsFromKnora_1","propertyDefinitionsFromKnora_1_1","superProp","getPropertyDefinitionsFromCache","onto","of","getAndCacheOntologies","observables","forkJoin","getEntityDefinitionsForOntologies","ontologyIrisToQuery","results","resClassIrisToQueryFor","propertiesToQuery","ReadResourcesSequence","resources","numberOfResources","ontologyInformation","CountQueryResult","numberOfResults","StillImageRepresentation","stillImageFileValue","regions","ImageRegion","regionResource","getGeometries","KuiCoreModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","HttpClientModule","declarations","exports","ɵ0","GroupsService","apply","getAllGroups","getGroupByIri","iri","ListsService","getLists","getList","listIri","getListInfo","getListNodeInfo","nodeIri","createList","payload","updateListInfo","ProjectsService","getAllProjects","getProjectByIri","getProject","getProjectByShortname","getProjectByShortcode","getProjectMembersByIri","getProjectMembers","getProjectMembersByShortname","getProjectMembersByShortcode","createProject","updateProject","activateProject","deleteProject","UsersService","usersUrl","getAllUsers","getUser","identifier","getUserByEmail","getUserByIri","createUser","addUserToProject","userIri","addUserToProjectAdmin","removeUserFromProjectAdmin","addUserToSystemAdmin","activateUser","updateUser","updateOwnPassword","oldPassword","newPassword","requesterPassword","updateUsersPassword","deleteUser","removeUserFromProject","LanguageService","subject","Subject","setLanguage","var","getLanguage","asObservable","StatusMsgService","_http","getStatusMsg","res","err","ConvertJSONLD","getPropertyNames","propName","constructReadResource","resourceJSONLD","constructReadProperties","standoffLinkValuesJSONLD","standoffLinkValues","standoffLinkValuesJSONLD_1","standoffLinkValuesJSONLD_1_1","standoffLinkJSONLD","standoffVal","createValueSpecificProp","propNames","keys","propNames_1","propNames_1_1","propValues","_d","_e","propValue","valueSpecificProp","textValue","standoffLinkValues_1","standoffLinkValues_1_1","referredRes","stringify","linkValue","incomingResource","incomingResourceIri","decVal","parseFloat","intStart","intEnd","getReferredResourceClasses","referredResourceClasses","propNames_2","propNames_2_1","createReadResourcesSequenceFromJsonLD","resourcesResponseJSONLD","resourcesGraph","resourcesGraph_1","resourcesGraph_1_1","resource","getResourceClassesFromJsonLD","resourcesGraph_2","resourcesGraph_2_1","createCountQueryResult","countQueryJSONLD","ResourceService","_ontologyCacheService","getResource","getReadResource","resSeq","ontoInfo","SearchService","convertJSONLDToReadResourceSequence","doFulltextSearch","searchTerm","offset","httpParams","HttpParams","set","doFullTextSearchReadResourceSequence","doFulltextSearchCountQuery","doFullTextSearchCountQueryCountQueryResult","doExtendedSearch","gravsearchQuery","doExtendedSearchReadResourceSequence","doExtendedSearchCountQuery","doExtendedSearchCountQueryCountQueryResult","searchByLabel","resourceClassIRI","searchByLabelReadResourceSequence","IncomingService","getIncomingRegions","resourceIRI","sparqlQueryStr","getStillImageRepresentationsForCompoundResource","getIncomingLinksForResource","ExtendedSearchParams","generateGravsearch","SearchParamsService","_currentSearchParams","BehaviorSubject","changeSearchParamsMsg","searchParams","getSearchParams","getValue","GravsearchGenerationError","msg","GravsearchGenerationService","_searchParamsService","convertComplexTypeToSimpleType","complexType","simpleType","typeConversionComplexToSimple","createGravsearchQuery","mainResourceClassOption","mainResourceClass","orderByCriteria","returnStatements","props","propWithVal","propIriSimple","statement","valueLiteral","comparisonOperator","toSparql","simple","propTypeAnnotation","propValueAnnotation","isSortCriterion","orderByStatement","join","gravsearchTemplate","offsetTemplate","localOffset","http://api.knora.org/ontology/knora-api/v2#IntValue","http://api.knora.org/ontology/knora-api/v2#DecimalValue","http://api.knora.org/ontology/knora-api/v2#BooleanValue","http://api.knora.org/ontology/knora-api/v2#TextValue","http://api.knora.org/ontology/knora-api/v2#DateValue","http://api.knora.org/ontology/knora-api/v2#IntervalValue","http://api.knora.org/ontology/knora-api/v2#GeomValue","http://api.knora.org/ontology/knora-api/v2#ColorValue","http://api.knora.org/ontology/knora-api/v2#GeonameValue","http://api.knora.org/ontology/knora-api/v2#UriValue","http://api.knora.org/ontology/knora-api/v2#StillImageFileValue","http://api.knora.org/ontology/knora-api/v2#FileValue","http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue","http://api.knora.org/ontology/knora-api/v2#DDDFileValue","http://api.knora.org/ontology/knora-api/v2#AudioFileValue","http://api.knora.org/ontology/knora-api/v2#DocumentFileValue","http://api.knora.org/ontology/knora-api/v2#TextFileValue","http://api.knora.org/ontology/knora-api/v2#ListValue","StoreService","resetTriplestoreContent","rdfDataObjects","BasicOntologyService","getBasicOntology","ResourceTypesService","getResourceTypesByVoc","getResourceType","Equals","NotEquals","GreaterThanEquals","GreaterThan","LessThan","LessThanEquals","Exists","Like","Match","ComparisonOperatorAndValue","ValueLiteral","schema","literalType","IRI","PropertyWithValue"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class KnoraConstants {\n\n    public static KnoraApi: string = 'http://api.knora.org/ontology/knora-api';\n    public static PathSeparator: string = '#';\n\n    public static KnoraOntologyPath: string = 'http://www.knora.org/ontology';\n    public static KnoraBase: string = KnoraConstants.KnoraOntologyPath + '/knora-base';\n\n    public static SystemProjectIRI: string = KnoraConstants.KnoraBase + '#SystemProject';\n    public static SystemAdminGroupIRI: string = KnoraConstants.KnoraBase + '#SystemAdmin';\n    public static ProjectAdminGroupIRI: string = KnoraConstants.KnoraBase + '#ProjectAdmin';\n    public static ProjectMemberGroupIRI: string = KnoraConstants.KnoraBase + '#ProjectMember';\n\n    public static KnoraApiV2WithValueObjectPath: string = KnoraConstants.KnoraApi + '/v2' + KnoraConstants.PathSeparator;\n    public static KnoraApiV2SimplePath: string = KnoraConstants.KnoraApi + '/simple/v2' + KnoraConstants.PathSeparator;\n\n    public static SalsahGuiOntology: string = 'http://api.knora.org/ontology/salsah-gui/v2';\n\n    public static SalsahGuiOrder: string = KnoraConstants.SalsahGuiOntology + '#guiOrder';\n\n    public static StandoffOntology: string = 'http://api.knora.org/ontology/standoff/v2';\n\n    public static Resource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Resource';\n    public static TextValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextValue';\n    public static IntValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntValue';\n    public static BooleanValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'BooleanValue';\n    public static UriValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'UriValue';\n    public static DecimalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DecimalValue';\n    public static DateValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DateValue';\n    public static ColorValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ColorValue';\n    public static GeomValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeomValue';\n    public static ListValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListValue';\n    public static IntervalValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'IntervalValue';\n    public static LinkValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'LinkValue';\n    public static GeonameValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'GeonameValue';\n    public static FileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'FileValue';\n    public static AudioFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'AudioFileValue';\n    public static DDDFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DDDFileValue';\n    public static DocumentFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'DocumentFileValue';\n    public static StillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'StillImageFileValue';\n    public static MovingImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'MovingImageFileValue';\n    public static TextFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'TextFileValue';\n    public static IsResourceClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isResourceClass';\n    public static IsValueClass: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isValueClass';\n    public static ForbiddenResource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ForbiddenResource';\n    public static XMLToStandoffMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'XMLToStandoffMapping';\n    public static ListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'ListNode';\n\n    public static ObjectType: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'objectType';\n    public static ResourceIcon: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'resourceIcon';\n    public static isEditable: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isEditable';\n    public static isLinkProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkProperty';\n    public static isLinkValueProperty: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'isLinkValueProperty';\n    public static hasGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasGeometry';\n\n    public static schemaName: string = 'http://schema.org/name';\n    public static schemaNumberOfItems: string = 'http://schema.org/numberOfItems';\n    public static schemaItemListElement: string = 'http://schema.org/itemListElement';\n\n\n    public static RdfProperty: string = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property';\n    public static RdfsSchema: string = 'http://www.w3.org/2000/01/rdf-schema' + KnoraConstants.PathSeparator;\n    public static RdfsLabel: string = KnoraConstants.RdfsSchema + 'label';\n    public static RdfsComment: string = KnoraConstants.RdfsSchema + 'comment';\n    public static RdfsSubclassOf: string = KnoraConstants.RdfsSchema + 'subClassOf';\n    public static subPropertyOf: string = KnoraConstants.RdfsSchema + 'subPropertyOf';\n\n    public static owl: string = 'http://www.w3.org/2002/07/owl';\n\n    public static OwlClass: string = KnoraConstants.owl + '#Class';\n    public static OwlObjectProperty: string = KnoraConstants.owl + '#ObjectProperty';\n    public static OwlDatatypeProperty: string = KnoraConstants.owl + '#DatatypeProperty';\n    public static OwlAnnotationProperty: string = KnoraConstants.owl + '#AnnotationProperty';\n    public static OwlOnProperty: string = KnoraConstants.owl + '#onProperty';\n    public static OwlMaxCardinality: string = KnoraConstants.owl + '#maxCardinality';\n    public static OwlMinCardinality: string = KnoraConstants.owl + '#minCardinality';\n    public static OwlCardinality: string = KnoraConstants.owl + '#cardinality';\n    public static OwlRestriction: string = KnoraConstants.owl + '#Restriction';\n\n    public static creationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'creationDate';\n    public static lastModificationDate: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'lastModificationDate';\n    public static hasPermissions: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasPermissions';\n    public static attachedToProject: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToProject';\n    public static attachedToUser: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'attachedToUser';\n\n    public static Region: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'Region';\n\n    public static ReadTextValueAsHtml: string = 'ReadTextValueAsHtml';\n    public static ReadTextValueAsString: string = 'ReadTextValueAsString';\n    public static ReadTextValueAsXml: string = 'ReadTextValueAsXml';\n    public static ReadDateValue: string = 'ReadDateValue';\n    public static ReadLinkValue: string = 'ReadLinkValue';\n    public static ReadIntegerValue: string = 'ReadIntegerValue';\n    public static ReadDecimalValue: string = 'ReadDecimalValue';\n    public static ReadStillImageFileValue: string = 'ReadStillImageFileValue';\n    public static ReadTextFileValue: string = 'ReadTextFileValue';\n    public static ReadGeomValue: string = 'ReadGeomValue';\n    public static ReadColorValue: string = 'ReadColorValue';\n    public static ReadUriValue: string = 'ReadUriValue';\n    public static ReadBooleanValue: string = 'ReadBooleanValue';\n    public static ReadIntervalValue: string = 'ReadIntervalValue';\n    public static ReadListValue: string = 'ReadListValue';\n\n    public static valueAsString: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'valueAsString';\n\n    public static textValueAsHtml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsHtml';\n    public static textValueAsXml: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueAsXml';\n    public static textValueHasMapping: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'textValueHasMapping';\n\n    public static hasStandoffLinkToValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStandoffLinkToValue';\n\n    public static dateValueHasStartYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartYear';\n    public static dateValueHasEndYear: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndYear';\n    public static dateValueHasStartEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartEra';\n    public static dateValueHasEndEra: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndEra';\n    public static dateValueHasStartMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartMonth';\n    public static dateValueHasEndMonth: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndMonth';\n    public static dateValueHasStartDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasStartDay';\n    public static dateValueHasEndDay: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasEndDay';\n    public static dateValueHasCalendar: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'dateValueHasCalendar';\n\n    public static linkValueHasTarget: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTarget';\n    public static linkValueHasSource: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSource';\n    public static linkValueHasSourceIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasSourceIri';\n    public static linkValueHasTargetIri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'linkValueHasTargetIri';\n\n    public static integerValueAsInteger: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intValueAsInt';\n\n    public static decimalValueAsDecimal: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'decimalValueAsDecimal';\n\n    public static fileValueAsUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueAsUrl';\n    public static fileValueIsPreview: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueIsPreview';\n    public static fileValueHasFilename: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'fileValueHasFilename';\n\n    public static hasStillImageFileValue: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'hasStillImageFileValue';\n\n    public static stillImageFileValueHasDimX: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimX';\n    public static stillImageFileValueHasDimY: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasDimY';\n    public static stillImageFileValueHasIIIFBaseUrl: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'stillImageFileValueHasIIIFBaseUrl';\n\n    public static colorValueAsColor: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'colorValueAsColor';\n    public static geometryValueAsGeometry: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'geometryValueAsGeometry';\n    public static uriValueAsUri: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'uriValueAsUri';\n    public static booleanValueAsBoolean: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'booleanValueAsBoolean';\n\n    public static intervalValueHasStart: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasStart';\n    public static intervalValueHasEnd: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'intervalValueHasEnd';\n\n    public static listValueAsListNode: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'listValueAsListNode';\n    public static listValueAsListNodeLabel: string = KnoraConstants.KnoraApiV2WithValueObjectPath + 'listValueAsListNodeLabel';\n\n    public static Xsd: string = 'http://www.w3.org/2001/XMLSchema#';\n\n    public static xsdString: string = KnoraConstants.Xsd + 'string';\n    public static xsdBoolean: string = KnoraConstants.Xsd + 'boolean';\n    public static xsdInteger: string = KnoraConstants.Xsd + 'integer';\n    public static xsdDecimal: string = KnoraConstants.Xsd + 'decimal';\n    public static xsdUri: string = KnoraConstants.Xsd + 'anyURI';\n\n    public static resourceSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Resource';\n    public static dateSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Date';\n    public static intervalSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Interval';\n    public static geomSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geom';\n    public static colorSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Color';\n    public static geonameSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'Geoname';\n    public static fileSimple: string = KnoraConstants.KnoraApiV2SimplePath + 'File';\n\n    public static matchFunction: string = KnoraConstants.KnoraApiV2SimplePath + 'match';\n\n    public static EqualsComparisonOperator: string = '=';\n    public static EqualsComparisonLabel: string = 'is equal to';\n\n    public static NotEqualsComparisonOperator: string = '!=';\n    public static NotEqualsComparisonLabel: string = 'is not equal to';\n\n    public static GreaterThanComparisonOperator: string = '>';\n    public static GreaterThanComparisonLabel: string = 'is greater than';\n\n    public static GreaterThanEqualsComparisonOperator: string = '>=';\n    public static GreaterThanEqualsComparisonLabel: string = 'is greater than equals to';\n\n    public static LessThanComparisonOperator: string = '<';\n    public static LessThanComparisonLabel: string = 'is less than';\n\n    public static LessThanEqualsComparisonOperator: string = '<=';\n    public static LessThanQualsComparisonLabel: string = 'is less than equals to';\n\n    public static ExistsComparisonOperator: string = 'E';\n    public static ExistsComparisonLabel: string = 'exists';\n\n    public static LikeComparisonOperator: string = 'regex';\n    public static LikeComparisonLabel: string = 'is like';\n\n    public static MatchComparisonOperator: string = 'contains';\n    public static MatchComparisonLabel: string = 'matches';\n\n    public static SalsahLink: string = 'salsah-link'; // class on an HTML <a> element that indicates a link to a Knora resource\n    public static RefMarker: string = 'ref-marker'; // class on an HTML element that refers to another element in the same document\n\n    public static GNDPrefix: string = '(DE-588)';\n    public static GNDResolver: string = 'http://d-nb.info/gnd/';\n\n    public static VIAFPrefix: string = '(VIAF)';\n    public static VIAFResolver: string = 'https://viaf.org/viaf/';\n\n}\n\n\nexport enum KnoraSchema {\n    complex = 0,\n    simple = 1\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n/**\n * Knora-ui core configuration with the server definitions of:\n *  - api: URL of data service e.g. knora: http://localhost:3333\n *  - media: URL of media server service e.g. sipi: http://localhost:1024\n *  - app: URL of the app e.g. salsah: http://localhost:4200\n */\n@JsonObject('KuiCoreConfig')\nexport class KuiCoreConfig {\n\n    /**\n     * name of the app e.g. 'SALSAH'\n     * @type {string}\n     */\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    /**\n     * url of the app e.g. 'https://salsah.org'\n     * @type {undefined}\n     */\n    @JsonProperty('app', String)\n    public app: string = undefined;\n\n    /**\n     * url of the api e.g. 'https://api.knora.org'\n     * @type {string}\n     */\n    @JsonProperty('api', String)\n    public api: string = undefined;\n\n    /**\n     * url of media/file server e.g. 'https://iiif.sipi.io'\n     * @type {string}\n     */\n    @JsonProperty('media', String)\n    public media: string = undefined;\n\n}\n","\nimport { JsonConvert, OperationMode, ValueCheckingMode } from 'json2typescript';\n\n/**\n * Result class used as API url response in ApiService\n */\nexport class ApiServiceResult {\n\n    private static jsonConvert: JsonConvert = new JsonConvert(OperationMode.ENABLE, ValueCheckingMode.ALLOW_NULL);\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Body as JSON\n     */\n    body: any;\n\n    /**\n     * Gets the result body as instance of classObject.\n     * @param classObject\n     * @returns {any}\n     * @throws\n     */\n\n    getBody(classObject?: { new(): any }): any {\n        // console.log(this.body);\n        return ApiServiceResult.jsonConvert.deserialize(this.body, classObject);\n    }\n\n\n}\n","\n/**\n * Error class used as API response in ApiService\n */\nexport class ApiServiceError {\n\n    /**\n     * Status number\n     */\n    status = 0;\n\n    /**\n     * Status text\n     */\n    statusText = '';\n\n    /**\n     * API url\n     */\n    url = '';\n\n    /**\n     * Additional error info\n     */\n    errorInfo = '';\n\n}\n","/**\n * Collection of useful utility functions.\n */\nimport { KnoraConstants } from './api/knora-constants';\n\n// @dynamic\nexport class Utils {\n    /**\n     * A regex to validate Email address.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n    /**\n     * A regex to validate Username.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUsername = /^[a-zA-Z0-9]+$/;\n\n    /**\n     * A regex to validate URLs.\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexUrl = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/i;\n\n    /**\n     * A regex to validate Passwords\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexPassword = /^(?=.*\\d)(?=.*[a-zA-Z]).{8,}$/i;\n\n    /**\n     * A regex to validate Hexadecimal values\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexHex = /^[0-9A-Fa-f]+$/;\n\n    /**\n     * A regex to validate shortname in projects\n     *\n     * @type {RegExp}\n     */\n    public static readonly RegexShortname = /^[a-zA-Z]+\\S*$/;\n\n\n    /**\n     * Lambda function eliminating duplicates in a collection to be passed to [[filter]].\n     *\n     * @param elem element of an Array that is currently being looked at.\n     * @param index current elements index.\n     * @param self reference to the whole Array.\n     * @returns {boolean} true if the same element does not already exist in the Array.\n     */\n    public static filterOutDuplicates = (elem, index: number, self) => {\n\n        // https://stackoverflow.com/questions/16747798/delete-duplicate-elements-from-an-array\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter?v=example\n\n        // returns true if the element's index equals the index of the leftmost element\n        // -> this means that there is no identical element before this index, hence it is not a duplicate\n        // for all other elements, false is returned\n        return index === self.indexOf(elem);\n\n    }\n\n    /**\n     * Given a Knora entity IRI, gets the ontology Iri.\n     *\n     * @param {string} entityIri an entity Iri.\n     * @return {string} the ontology IRI\n     */\n    public static getOntologyIriFromEntityIri(entityIri: string) {\n\n        // split class Iri on \"#\"\n        const segments: string[] = entityIri.split(KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${entityIri} is not a valid entity IRI.`);\n\n        return segments[0];\n\n    }\n\n    /**\n     * Converts a complex knora-api entity Iri to a knora-api simple entity Iri.\n     *\n     * @param {string} complexEntityIri\n     * @returns {string}\n     */\n    public static convertComplexKnoraApiEntityIritoSimple(complexEntityIri: string) {\n\n        // split entity Iri on \"#\"\n        const segments: string[] = complexEntityIri.split('v2' + KnoraConstants.PathSeparator);\n\n        if (segments.length !== 2) console.error(`Error: ${complexEntityIri} is not a valid entity IRI.`);\n\n        // add 'simple' to base path\n        return segments[0] + 'simple/v2' + KnoraConstants.PathSeparator + segments[1];\n\n    }\n\n\n}\n","/**\n * Precision for DateSalsah.\n */\nexport enum Precision {\n    yearPrecision,\n    monthPrecision,\n    dayPrecision\n}\n\n/**\n * Represents a Salsah date object with a precision information.\n */\nexport class DateSalsah {\n\n    private static separator = '-';\n\n    readonly precision: Precision;\n\n    constructor(\n        readonly calendar: string,\n        readonly era: string,\n        readonly year: number,\n        readonly month?: number,\n        readonly day?: number\n    ) {\n        if (this.month === undefined) {\n            // year precision\n            this.precision = Precision.yearPrecision;\n        } else if (this.day === undefined) {\n            // month precision\n            this.precision = Precision.monthPrecision;\n        } else {\n            // day precision\n            this.precision = Precision.dayPrecision;\n        }\n\n    }\n\n    /**\n     * Returns a string representation of the date without the calendar.\n     *\n     * @returns {string}\n     */\n    getDateAsStringWithoutCalendar() {\n\n        let dateString = '(' + this.era + ') ';\n\n        switch (this.precision) {\n\n            case Precision.yearPrecision: {\n                dateString += this.year.toString();\n                break;\n            }\n\n            case Precision.monthPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month;\n                break;\n            }\n\n            case Precision.dayPrecision: {\n                dateString += this.year + DateSalsah.separator + this.month + DateSalsah.separator + this.day;\n                break;\n            }\n\n            default: {\n                break;\n            }\n\n        }\n\n        return dateString;\n    }\n\n    /**\n     * Returns a string representation of the date (with calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString(): string {\n\n        return this.calendar + ':' + this.getDateAsStringWithoutCalendar();\n    }\n\n}\n\n/**\n * Represents a period (with start date and end date).\n */\nexport class DateRangeSalsah {\n\n    constructor(\n        readonly start: DateSalsah,\n        readonly end: DateSalsah\n    ) {\n    }\n\n    /**\n     * Returns a string representation of the date range (with preceding calendar).\n     *\n     * @returns {string}\n     */\n    getDateAsString() {\n        return this.start.getDateAsString() + ':' + this.end.getDateAsStringWithoutCalendar();\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('StringLiteral')\nexport class StringLiteral {\n\n    @JsonProperty('value', String, false)\n    public value: string = undefined;\n\n    @JsonProperty('language', String, true)\n    public language: string = '';\n}\n","import { Injectable } from '@angular/core';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { Utils } from '../../declarations/utils';\nimport { OntologyService } from './ontology.service';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n/**\n * Represents an error occurred in OntologyCacheService.\n */\nclass OntologyCacheError extends Error {\n\n    constructor(readonly message: string) {\n        super(message);\n    }\n}\n\n\n/**\n * Represents an ontology's metadata.\n */\nexport class OntologyMetadata {\n\n    /**\n     * @hideconstructor\n     *\n     * @param {string} id Iri identifying the ontology.\n     * @param {string} label a label describing the ontology.\n     */\n    constructor(readonly id: string,\n        readonly label: string) {\n\n    }\n\n}\n\n\n/**\n * Occurrence of a property for a resource class (its cardinality).\n */\nexport enum CardinalityOccurrence {\n    minCard = 0,\n    card = 1,\n    maxCard = 2\n}\n\n\n/**\n * Cardinality of a property for the given resource class.\n */\nexport class Cardinality {\n\n    /**\n     * @param {CardinalityOccurrence} occurrence type of given occurrence.\n     * @param {number} value numerical value of given occurrence.\n     * @param {string} property the property the given occurrence applies to.\n     */\n    constructor(readonly occurrence: CardinalityOccurrence,\n        readonly value: number,\n        readonly property: string) {\n    }\n}\n\n\n/**\n * A resource class definition.\n */\nexport class ResourceClass {\n\n    /**\n     * @param {string} id Iri identifying the resource class.\n     * @param {string} icon path to an icon representing the resource class.\n     * @param {string} comment comment on the resource class.\n     * @param {string} label label describing the resource class.\n     * @param {Cardinality[]} cardinalities the resource class's properties.\n     */\n    constructor(readonly id: string,\n        readonly icon: string,\n        readonly comment: string,\n        readonly label: string,\n        readonly cardinalities: Array<Cardinality>) {\n\n    }\n}\n\n\n/**\n * A map of resource class Iris to resource class definitions.\n */\nexport class ResourceClasses {\n    [index: string]: ResourceClass;\n}\n\n\n/**\n * A property definition.\n */\nexport class Property {\n\n    /**\n     * @param {string} id Iri identifying the property definition.\n     * @param {string} objectType the property's object constraint.\n     * @param {string} comment comment on the property definition.\n     * @param {string} label label describing the property definition.\n     * @param {string[]} subPropertyOf Iris of properties the given property is a subproperty of.\n     * @param {boolean} isEditable indicates whether the given property can be edited by the client.\n     * @param {boolean} isLinkProperty indicates whether the given property is a linking property.\n     * @param {boolean} isLinkValueProperty indicates whether the given property refers to a link value.\n     */\n    constructor(readonly id: string,\n        readonly objectType: string,\n        readonly comment: string,\n        readonly label: string,\n        readonly subPropertyOf: Array<string>,\n        readonly isEditable: Boolean,\n        readonly isLinkProperty: Boolean,\n        readonly isLinkValueProperty: Boolean) {\n\n    }\n}\n\n\n/**\n * A map of property Iris to property definitions.\n */\nexport class Properties {\n    [index: string]: Property;\n}\n\n\n/**\n * Groups resource classes by the ontology they are defined in.\n *\n * A map of ontology Iris to an array of resource class Iris.\n */\nexport class ResourceClassIrisForOntology {\n    [index: string]: Array<string>;\n}\n\n\n/**\n * Represents cached ontology information (only used by this service internally).\n * This cache is updated whenever new definitions are requested from Knora.\n *\n * Requested ontology information by a service is represented by [[OntologyInformation]].\n */\nclass OntologyCache {\n\n    /**\n     * @param {OntologyMetadata[]} ontologies An array of all existing ontologies.\n     */\n    ontologies: Array<OntologyMetadata>;\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassIrisForOntology list of all resource class Iris for a named graph.\n     */\n    resourceClassIrisForOntology: ResourceClassIrisForOntology;\n\n    /**\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     */\n    resourceClasses: ResourceClasses;\n\n    /**\n     * @param {Properties} properties property definitions.\n     */\n    properties: Properties;\n\n    constructor() {\n        this.ontologies = [];\n\n        this.resourceClassIrisForOntology = new ResourceClassIrisForOntology();\n\n        this.resourceClasses = new ResourceClasses();\n\n        this.properties = new Properties();\n    }\n}\n\n/**\n * Represents ontology information requested from this service.\n *\n * For every request, an instance of this class is returned containing the requested information.\n */\nexport class OntologyInformation {\n\n    /**\n     * @param {ResourceClassIrisForOntology} resourceClassesForOntology all resource class Iris for a given ontology.\n     * @param {ResourceClasses} resourceClasses resource class definitions.\n     * @param {Properties} properties property definitions.\n     */\n    constructor(\n        private resourceClassesForOntology: ResourceClassIrisForOntology,\n        private resourceClasses: ResourceClasses,\n        private properties: Properties) {\n    }\n\n    /**\n     * Sorts an array of `ResourceClass` or `Property` by label.\n     *\n     * @param a first element\n     * @param b second element\n     * @return negative -1 if the first element is considered lower than the second, 1 if the second element is considered bigger, 0 if they are equal\n     */\n    static sortFunc(a: ResourceClass | Property, b: ResourceClass | Property) {\n        // dealing with 'undefined' labels\n        if (a.label === undefined) {\n            return 1;\n        } else if (b.label === undefined) {\n            return -1;\n        }\n\n        const labelA = a.label.toLowerCase();\n        const labelB = b.label.toLowerCase();\n\n        if (labelA < labelB) {\n            return -1;\n        } else if (labelA > labelB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Merge the given [[OntologyInformation]] into the current instance,\n     * updating the existing information.\n     * This is necessary when a service like the search fetches new results\n     * that have to be added to an existing collection.\n     * The existing ontology information must not be lost.\n     *\n     * @param {OntologyInformation} ontologyInfo the given definitions that have to be integrated.\n     * @returns void\n     */\n    updateOntologyInformation(ontologyInfo: OntologyInformation): void {\n\n        // get new resourceClassIrisForOntology\n        const newResourceClassesForOntology: ResourceClassIrisForOntology = ontologyInfo.getResourceClassForOntology();\n\n        // update new resourceClassIrisForOntology\n        // tslint:disable-next-line:forin\n        for (const newResClassForOntology in newResourceClassesForOntology) {\n            this.resourceClassesForOntology[newResClassForOntology] = newResourceClassesForOntology[newResClassForOntology];\n        }\n\n        // get new resource class definitions\n        const newResourceClasses = ontologyInfo.getResourceClasses();\n\n        // update resourceClasses\n        // tslint:disable-next-line:forin\n        for (const newResClass in newResourceClasses) {\n            this.resourceClasses[newResClass] = newResourceClasses[newResClass];\n        }\n\n        // get new property definitions\n        const newProperties = ontologyInfo.getProperties();\n\n        // update properties\n        // tslint:disable-next-line:forin\n        for (const newProp in newProperties) {\n            this.properties[newProp] = newProperties[newProp];\n        }\n\n    }\n\n    /**\n     * Returns resource class definitions for ontologies.\n     *\n     * @returns ResourceClassIrisForOntology - all resource class definitions grouped by ontologies.\n     */\n    getResourceClassForOntology(): ResourceClassIrisForOntology {\n        return this.resourceClassesForOntology;\n    }\n\n    /**\n     * Returns all resource classes as an object.\n     *\n     * @returns ResourceClasses - all resource class definitions as an object.\n     */\n    getResourceClasses(): ResourceClasses {\n        return this.resourceClasses;\n    }\n\n    /**\n     * Returns all resource classes as an array.\n     *\n     * @param {boolean} sortAsc sort resource classes by label in ascending order by default\n     * @returns ResourceClass[]\n     */\n    getResourceClassesAsArray(sortAsc: boolean = true): Array<ResourceClass> {\n\n        const resClasses: Array<ResourceClass> = [];\n\n        // tslint:disable-next-line:forin\n        for (const resClassIri in this.resourceClasses) {\n            const resClass: ResourceClass = this.resourceClasses[resClassIri];\n            resClasses.push(resClass);\n        }\n\n        // resourceClasses order by label in ascending order\n        resClasses.sort(OntologyInformation.sortFunc);\n\n        // resourceClasses order by label in descending order\n        if (!sortAsc) {\n            resClasses.reverse();\n        }\n\n        return resClasses;\n\n    }\n\n    /**\n     * Returns a resource class's label.\n     *\n     * @param {string} resClass resource class to query for.\n     * @returns string - the resource class's label.\n     */\n    getLabelForResourceClass(resClass: string): string {\n\n        if (resClass !== undefined) {\n\n            const resClassDef = this.resourceClasses[resClass];\n\n            if (resClassDef !== undefined && resClassDef.label !== undefined) {\n                return resClassDef.label;\n            } else {\n                return resClassDef.id;\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForResourceClass without argument resClass');\n        }\n    }\n\n    /**\n     * Returns all properties as an object.\n     *\n     * @returns Properties - all properties as an object.\n     */\n    getProperties(): Properties {\n        return this.properties;\n    }\n\n    /**\n     * Returns all properties as an array.\n     *\n     * @param {boolean} sortAsc sort properties by label in ascending order by default\n     * @returns Property[] - all properties as an array.\n     */\n    getPropertiesAsArray(sortAsc: boolean = true): Array<Property> {\n\n        const properties: Array<Property> = [];\n\n        // tslint:disable-next-line:forin\n        for (const propIri in this.properties) {\n            const prop: Property = this.properties[propIri];\n            properties.push(prop);\n        }\n\n        // properties order by label in ascending order\n        properties.sort(OntologyInformation.sortFunc);\n\n        // properties order by label in descending order\n        if (!sortAsc) {\n            properties.reverse();\n        }\n\n        return properties;\n\n    }\n\n    /**\n     * Returns a property's label.\n     *\n     * @param {string} property to query for.\n     * @returns string - the property's label.\n     */\n    getLabelForProperty(property: string): string {\n\n        if (property !== undefined) {\n\n            const propDef = this.properties[property];\n\n            if (propDef !== undefined && propDef.label !== undefined) {\n                return propDef.label;\n            } else {\n                return propDef.id;\n            }\n        } else {\n            console.log('call of OntologyInformation.getLabelForProperty without argument property');\n        }\n    }\n\n}\n\n\n/**\n * Requests ontology information from Knora and caches it.\n * Other components or services obtain ontology information through this service.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class OntologyCacheService {\n\n    /**\n     * Ontologies ingored by this service.\n     * @param {string[]} excludedOntologies\n     */\n    private excludedOntologies: Array<string> = [KnoraConstants.SalsahGuiOntology, KnoraConstants.StandoffOntology];\n\n    /**\n     * @param {string[]} excludedProperties properties that Knora is not responsible for and that have to be ignored because they cannot be resolved at the moment.\n     */\n    private excludedProperties: Array<string> = [KnoraConstants.RdfsLabel];\n\n    /**\n     * @param {string[]} nonResourceClasses class definitions that are not be treated as Knora resource classes\n     */\n    private nonResourceClasses: Array<string> = [KnoraConstants.ForbiddenResource, KnoraConstants.XMLToStandoffMapping, KnoraConstants.ListNode];\n\n    /**\n     * @param {OntologyCache} cacheOntology central instance that caches all definitions\n     */\n    private cacheOntology: OntologyCache = new OntologyCache();\n\n    constructor(private _ontologyService: OntologyService) {\n    }\n\n    /**\n     * Requests the metadata of all ontologies from Knora.\n     *\n     * @returns Observable<object> - metadata for all ontologies as JSON-LD (no prefixes, all Iris fully expanded).\n     */\n    private getOntologiesMetadataFromKnora(): Observable<object> {\n\n        return this._ontologyService.getOntologiesMetadata().pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Requests all entity definitions (resource classes and properties) for the given ontology from Knora.\n     *\n     * @param {string} ontologyIri the Iri of the requested ontology.\n     * @returns Observable<object> - metadata for all entity definitions for ontology from Knora.\n     */\n    private getAllEntityDefinitionsForOntologyFromKnora(ontologyIri: string): Observable<object> {\n\n        return this._ontologyService.getAllEntityDefinitionsForOntologies(ontologyIri).pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                // http://reactivex.io/documentation/operators/flatmap.html\n                // http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-mergeMap\n                (ontRes: ApiServiceResult) => {\n                    const ontPromises = jsonld.promises;\n                    // compact JSON-LD using an empty context: expands all Iris\n                    const ontPromise = ontPromises.compact(ontRes.body, {});\n\n                    // convert promise to Observable and return it\n                    // https://www.learnrxjs.io/operators/creation/frompromise.html\n                    return from(ontPromise);\n                }\n            )\n        );\n    }\n\n    /**\n     * Writes all the ontologies' metadata returned by Knora to the cache.\n     *\n     * @param {object[]} ontologies metadata of all existing ontologies as JSON-LD.\n     * @returns a new OntologyMetadata object\n     */\n    private convertAndWriteOntologiesMetadataToCache(ontologies: object[]) {\n\n        this.cacheOntology.ontologies = ontologies.map(\n            ontology => {\n                return new OntologyMetadata(ontology['@id'], ontology[KnoraConstants.RdfsLabel]);\n            }\n        );\n    }\n\n    /**\n     * Returns all ontologies' metadata from the cache and returns them.\n     *\n     * @returns Array<OntologyMetadata> - metadata of all existing ontologies.\n     */\n    private getAllOntologiesMetadataFromCache(): Array<OntologyMetadata> {\n\n        return this.cacheOntology.ontologies;\n\n    }\n\n    /**\n     * Returns resource class Iris from the ontology response.\n     * `knora-api:Resource` will be excluded.\n     *\n     * @param {Array<object>} classDefinitions the class definitions in an ontology response.\n     * @returns string[] - resource class Iris from the given class definitions.\n     */\n    private getResourceClassIrisFromOntologyResponse(classDefinitions: Array<object>): string[] {\n        const resourceClassIris: string[] = [];\n\n        for (const classDef of classDefinitions) {\n            const classIri = classDef['@id'];\n\n            // check that class name is not listed as a non resource class and that the isResourceClass flag is present and set to true\n            if (\n                classIri !== KnoraConstants.Resource && this.nonResourceClasses.indexOf(classIri)\n                === -1 && (classDef[KnoraConstants.IsResourceClass] !== undefined && classDef[KnoraConstants.IsResourceClass] === true)) {\n                // it is not a value class, but a resource class definition\n                resourceClassIris.push(classIri);\n            }\n        }\n\n        return resourceClassIris;\n    }\n\n    /**\n     * Converts a Knora response for all entity definitions for the requested ontology\n     * into an internal representation and caches it.\n     *\n     * Knora automatically includes the property definitions referred to in the cardinalities of resource classes.\n     * If they are defined in another ontology, that ontology is requested from Knora too.\n     *\n     * @param {Object} ontology the ontology to be cached.\n     * @returns void\n     */\n    private convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology: object): void {\n\n        const graph = ontology['@graph'];\n\n        // get all class definitions\n        const classDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlClass;\n            });\n\n        // get all property definitions\n        const propertyDefs = graph.filter(\n            (entity: Object) => {\n                const entityType = entity['@type'];\n                return entityType === KnoraConstants.OwlObjectProperty ||\n                    entityType === KnoraConstants.OwlDatatypeProperty ||\n                    entityType === KnoraConstants.OwlAnnotationProperty ||\n                    entityType === KnoraConstants.RdfProperty;\n            });\n\n\n        // cache all resource class Iris belonging to the current ontology\n        this.cacheOntology.resourceClassIrisForOntology[ontology['@id']] = this.getResourceClassIrisFromOntologyResponse(classDefs);\n\n        // write class and property defintions to cache\n        this.convertAndWriteEntityDefinitionsToCache(classDefs, propertyDefs);\n\n    }\n\n    /**\n     * Returns definitions for the requested ontologies from the cache.\n     *\n     * @param {string[]} ontologyIris the ontologies for which definitions should be returned.\n     * @returns Observable<OntologyInformation> - the definitions for the requested ontologies.\n     */\n    private getOntologyInformationFromCache(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const resourceClassesForOntology = new ResourceClassIrisForOntology();\n\n        // collect resource class Iris for all requested named graphs\n        let allResourceClassIris = [];\n\n        for (const ontologyIri of ontologyIris) {\n\n            if (this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined) {\n                throw new OntologyCacheError(`getResourceClassesForOntologiesFromCache: ontology not found in cache: ${ontologyIri}`);\n            }\n\n            // add information for the given ontology\n            resourceClassesForOntology[ontologyIri] = this.cacheOntology.resourceClassIrisForOntology[ontologyIri];\n\n            // add all resource class Iris of this ontology\n            allResourceClassIris = allResourceClassIris.concat(this.cacheOntology.resourceClassIrisForOntology[ontologyIri]);\n        }\n\n        // get resource class definitions for all requested ontologies\n        return this.getResourceClassDefinitions(allResourceClassIris).pipe(\n            map(\n                resClassDefs => {\n                    return new OntologyInformation(\n                        resourceClassesForOntology, resClassDefs.getResourceClasses(), resClassDefs.getProperties()\n                    );\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora ontology response into an internal representation and caches it.\n     *\n     * @param {object[]} resourceClassDefinitions the resource class definitions returned by Knora.\n     * @param {object[]} propertyClassDefinitions the property definitions returned by Knora.\n     * @returns void\n     */\n    private convertAndWriteEntityDefinitionsToCache(resourceClassDefinitions: Array<object>, propertyClassDefinitions: Array<object>): void {\n\n        // convert and cache each given resource class definition\n        for (const resClass of resourceClassDefinitions) {\n\n            const resClassIri = resClass['@id'];\n\n            // represents all cardinalities of this resource class\n            const cardinalities: Cardinality[] = [];\n\n            if (resClass[KnoraConstants.RdfsSubclassOf] !== undefined) {\n\n                let subclassOfCollection;\n\n                // check if it is a single object or a collection\n                if (!Array.isArray(resClass[KnoraConstants.RdfsSubclassOf])) {\n                    subclassOfCollection = [resClass[KnoraConstants.RdfsSubclassOf]];\n                } else {\n                    subclassOfCollection = resClass[KnoraConstants.RdfsSubclassOf];\n                }\n\n                // get cardinalities for the properties of a resource class\n                for (const curCard of subclassOfCollection) {\n\n                    // make sure it is a cardinality (it could also be an Iri of a superclass)\n                    if (curCard instanceof Object && curCard['@type'] !== undefined && curCard['@type'] === KnoraConstants.OwlRestriction) {\n\n                        let newCard;\n\n                        // get occurrence\n                        if (curCard[KnoraConstants.OwlMinCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.minCard, curCard[KnoraConstants.OwlMinCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.card, curCard[KnoraConstants.OwlCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else if (curCard[KnoraConstants.OwlMaxCardinality] !== undefined) {\n                            newCard = new Cardinality(CardinalityOccurrence.maxCard, curCard[KnoraConstants.OwlMaxCardinality], curCard[KnoraConstants.OwlOnProperty]['@id']);\n                        } else {\n                            // no known occurrence found\n                            throw new TypeError(`cardinality type invalid for ${resClass['@id']} ${curCard[KnoraConstants.OwlOnProperty]}`);\n                        }\n\n                        // TODO: get gui order\n\n\n                        // add cardinality\n                        cardinalities.push(newCard);\n\n                    }\n\n                }\n            }\n\n            const resClassObj = new ResourceClass(\n                resClassIri,\n                resClass[KnoraConstants.ResourceIcon],\n                resClass[KnoraConstants.RdfsComment],\n                resClass[KnoraConstants.RdfsLabel],\n                cardinalities\n            );\n\n            // write this resource class definition to the cache object\n            this.cacheOntology.resourceClasses[resClassIri] = resClassObj;\n        }\n\n        // cache the property definitions\n        this.convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyClassDefinitions);\n    }\n\n    /**\n     * Gets information about resource classes from the cache.\n     * The answer includes the property definitions referred to by the cardinalities of the given resource classes.\n     *\n     * @param {string[]} resClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - an [[OntologyCache]] representing the requested resource classes.\n     */\n    private getResourceClassDefinitionsFromCache(resClassIris: string[]): Observable<OntologyInformation> {\n        // collect the definitions for each resource class from the cache\n\n        const resClassDefs = new ResourceClasses();\n\n        // collect the properties from the cardinalities of the given resource classes\n        const propertyIris = [];\n\n        resClassIris.forEach(\n            resClassIri => {\n                resClassDefs[resClassIri] = this.cacheOntology.resourceClasses[resClassIri];\n\n                this.cacheOntology.resourceClasses[resClassIri].cardinalities.forEach(\n                    card => {\n                        // get property definition for each cardinality\n                        propertyIris.push(card.property);\n                    }\n                );\n            });\n\n        return this.getPropertyDefinitions(propertyIris).pipe(\n            map(\n                propDefs => {\n                    return new OntologyInformation(new ResourceClassIrisForOntology(), resClassDefs, propDefs.getProperties());\n                }\n            )\n        );\n\n    }\n\n    /**\n     * Converts a Knora response for ontology information about properties\n     * into an internal representation and cache it.\n     *\n     * @param {object[]} propertyDefinitionsFromKnora the property definitions returned by Knora\n     * @returns void\n     */\n    private convertAndWriteKnoraPropertyDefinitionsToOntologyCache(propertyDefinitionsFromKnora: Array<object>): void {\n\n        // convert and cache each given property definition\n        for (const propDef of propertyDefinitionsFromKnora) {\n\n            const propIri = propDef['@id'];\n\n            let isEditable = false;\n            if (propDef[KnoraConstants.isEditable] !== undefined && propDef[KnoraConstants.isEditable] === true) {\n                isEditable = true;\n            }\n\n            let isLinkProperty = false;\n            if (propDef[KnoraConstants.isLinkProperty] !== undefined && propDef[KnoraConstants.isLinkProperty] === true) {\n                isLinkProperty = true;\n            }\n\n            let isLinkValueProperty = false;\n            if (propDef[KnoraConstants.isLinkValueProperty] !== undefined && propDef[KnoraConstants.isLinkValueProperty] === true) {\n                isLinkValueProperty = true;\n            }\n\n            let subPropertyOf = [];\n            if (propDef[KnoraConstants.subPropertyOf] !== undefined && Array.isArray(propDef[KnoraConstants.subPropertyOf])) {\n                subPropertyOf = propDef[KnoraConstants.subPropertyOf].map((superProp: Object) => superProp['@id']);\n            } else if (propDef[KnoraConstants.subPropertyOf] !== undefined) {\n                subPropertyOf.push(propDef[KnoraConstants.subPropertyOf]['@id']);\n            }\n\n            let objectType;\n            if (propDef[KnoraConstants.ObjectType] !== undefined) {\n                objectType = propDef[KnoraConstants.ObjectType]['@id'];\n            }\n\n            // cache property definition\n            this.cacheOntology.properties[propIri] = new Property(\n                propIri,\n                objectType,\n                propDef[KnoraConstants.RdfsComment],\n                propDef[KnoraConstants.RdfsLabel],\n                subPropertyOf,\n                isEditable,\n                isLinkProperty,\n                isLinkValueProperty\n            );\n\n        }\n\n    }\n\n    /**\n     * Returns property definitions from the cache.\n     *\n     * @param {string[]} propertyIris the property definitions to be returned.\n     * @returns OntologyInformation - requested property defintions.\n     */\n    private getPropertyDefinitionsFromCache(propertyIris: string[]): OntologyInformation {\n\n        const propertyDefs = new Properties();\n\n        propertyIris.forEach(\n            propIri => {\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return;\n                }\n\n                if (this.cacheOntology.properties[propIri] === undefined) {\n                    throw new OntologyCacheError(`getPropertyDefinitionsFromCache: property not found in cache: ${propIri}`);\n                }\n\n                propertyDefs[propIri] = this.cacheOntology.properties[propIri];\n            }\n        );\n\n        return new OntologyInformation(new ResourceClassIrisForOntology(), new ResourceClasses(), propertyDefs);\n\n    }\n\n    /**\n     * Returns metadata about all ontologies.\n     *\n     * @returns Observable<Array<OntologyMetadata>> - metadata about all ontologies.\n     */\n    public getOntologiesMetadata(): Observable<Array<OntologyMetadata>> {\n\n        if (this.cacheOntology.ontologies.length === 0) {\n            // nothing in cache yet, get metadata from Knora\n            return this.getOntologiesMetadataFromKnora().pipe(\n                map(\n                    metadata => {\n                        this.convertAndWriteOntologiesMetadataToCache(metadata['@graph'].filter((onto) => {\n                            // ignore excluded ontologies\n                            return this.excludedOntologies.indexOf(onto['@id']) === -1;\n                        }));\n                        return this.getAllOntologiesMetadataFromCache();\n                    }\n                )\n            );\n        } else {\n            // return metadata from cache\n            return of(this.getAllOntologiesMetadataFromCache());\n        }\n\n    }\n\n\n    /**\n     * Requests the requested ontologies from Knora, adding them to the cache.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be requested.\n     * @returns Observable<any[]>\n     */\n    private getAndCacheOntologies(ontologyIris: string[]): Observable<any[]> {\n\n        // array to be populated with Observables\n        const observables = [];\n\n        // do a request for each ontology\n        ontologyIris.forEach(ontologyIri => {\n            // push an Observable onto `observables`\n            observables.push(this.getAllEntityDefinitionsForOntologyFromKnora(ontologyIri).pipe(\n                map(\n                    (ontology: object) => {\n                        // write response to cache\n                        this.convertAndWriteAllEntityDefinitionsForOntologyToCache(ontology);\n                    }\n                )\n            ));\n        });\n\n        // forkJoin returns an Observable of an array of results\n        // returned by each Observable contained in `observables`\n        // a subscription to the Observable returned by forkJoin is executed\n        // once all Observables have been completed\n        return forkJoin(observables);\n    }\n\n\n    /**\n     * Returns the entity definitions for the requested ontologies.\n     *\n     * @param {string[]} ontologyIris Iris of the ontologies to be queried.\n     * @returns Observable<OntologyInformation> - all ontology metadata from the cache\n     */\n    public getEntityDefinitionsForOntologies(ontologyIris: string[]): Observable<OntologyInformation> {\n\n        const ontologyIrisToQuery = ontologyIris.filter(\n            ontologyIri => {\n                // return the ontology Iris that are not cached yet\n                return this.cacheOntology.resourceClassIrisForOntology[ontologyIri] === undefined;\n            });\n\n        // get ontologies that are mot cached yet\n        if (ontologyIrisToQuery.length > 0) {\n\n            return this.getAndCacheOntologies(ontologyIrisToQuery).pipe(\n                mergeMap(\n                    results => {\n                        // executed once all ontologies have been cached\n                        return this.getOntologyInformationFromCache(ontologyIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getOntologyInformationFromCache(ontologyIris);\n        }\n\n    }\n\n    /**\n     * Returns the definitions for the given resource class Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * Properties contained in the cardinalities will be returned too.\n     *\n     * @param {string[]} resourceClassIris the given resource class Iris\n     * @returns Observable<OntologyInformation> - the requested resource classes (including properties).\n     */\n    public getResourceClassDefinitions(resourceClassIris: string[]): Observable<OntologyInformation> {\n\n        const resClassIrisToQueryFor: string[] = resourceClassIris.filter(\n            resClassIri => {\n\n                // return the resource class Iris that are not cached yet\n                return this.cacheOntology.resourceClasses[resClassIri] === undefined;\n\n            });\n\n        if (resClassIrisToQueryFor.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing resource classes\n            const ontologyIris: string[] = resClassIrisToQueryFor.map(\n                resClassIri => {\n                    return Utils.getOntologyIriFromEntityIri(resClassIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                mergeMap(\n                    results => {\n\n                        return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n                    }\n                )\n            );\n        } else {\n\n            return this.getResourceClassDefinitionsFromCache(resourceClassIris);\n\n        }\n    }\n\n    /**\n     * Get definitions for the given property Iris.\n     * If the definitions are not already in the cache, the will be retrieved from Knora and cached.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be returned .\n     * @returns Observable<OntologyInformation> - the requested property definitions.\n     */\n    public getPropertyDefinitions(propertyIris: string[]): Observable<OntologyInformation> {\n\n        const propertiesToQuery: string[] = propertyIris.filter(\n            propIri => {\n\n                // ignore non Knora props: if propIri is contained in excludedProperties, skip this propIri\n                if (this.excludedProperties.indexOf(propIri) > -1) {\n                    return false;\n                }\n\n                // return the property Iris that are not cached yet\n                return this.cacheOntology.properties[propIri] === undefined;\n            }\n        );\n\n        if (propertiesToQuery.length > 0) {\n\n            // get a set of ontology Iris that have to be queried to obtain the missing properties\n            const ontologyIris: string[] = propertiesToQuery.map(\n                propIri => {\n                    return Utils.getOntologyIriFromEntityIri(propIri);\n                }\n            ).filter(Utils.filterOutDuplicates);\n\n            // obtain missing resource class information\n            return this.getAndCacheOntologies(ontologyIris).pipe(\n                map(\n                    results => {\n                        if (results) {\n                            return this.getPropertyDefinitionsFromCache(propertyIris);\n                        } else {\n                            throw new Error('Problem with: return this.getPropertyDefinitionsFromCache(propertyIris);');\n                        }\n                    }\n                )\n            );\n        } else {\n            return of(this.getPropertyDefinitionsFromCache(propertyIris));\n        }\n    }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('AuthenticationResponse')\nexport class AuthenticationResponse {\n\n    @JsonProperty('token', String)\n    public token: string = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n\n@JsonObject('Project')\nexport class Project {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('shortname', String)\n    public shortname: string = undefined;\n\n    @JsonProperty('shortcode', String, true)\n    public shortcode: string = undefined;\n\n    @JsonProperty('longname', String, true)\n    public longname: string = undefined;\n\n    @JsonProperty('description', [StringLiteral], true)\n    public description: StringLiteral[] = [new StringLiteral()];\n\n    @JsonProperty('keywords', [String], true)\n    public keywords: string[] = undefined;\n\n    @JsonProperty('logo', String, true)\n    public logo: string = undefined;\n\n    @JsonProperty('institution', String, true)\n    public institution: string = undefined;\n\n    @JsonProperty('ontologies', [String])\n    public ontologies: string[] = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from '../projects/project';\n\n@JsonObject('Group')\nexport class Group {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    @JsonProperty('description', String)\n    public description: string = undefined;\n\n    @JsonProperty('project', Project, false)\n    public project: Project = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('selfjoin', Boolean)\n    public selfjoin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupResponse')\nexport class GroupResponse {\n\n    @JsonProperty('group', Group)\n    public group: Group = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from './group';\n\n@JsonObject('GroupsResponse')\nexport class GroupsResponse {\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListInfo')\nexport class ListInfo {\n\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('projectIri', String, false)\n    public projectIri: string = undefined;\n\n    @JsonProperty('labels', [StringLiteral], true)\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral], true)\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('ListNode')\nexport class ListNode {\n    @JsonProperty('id', String, false)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('label', String, true)\n    public label: string = undefined;\n\n    @JsonProperty('children', [ListNode], true)\n    public children: ListNode[] = undefined;\n\n    @JsonProperty('level', Number, true)\n    public level: number = undefined;\n\n    @JsonProperty('position', Number, true)\n    public position: number = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\nimport { ListNode } from './list-node';\n\n@JsonObject('List')\nexport class List {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n\n    @JsonProperty('children', [ListNode], false)\n    public children: ListNode[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListInfo } from './list-info';\n\n@JsonObject('ListInfoResponse')\nexport class ListInfoResponse {\n\n    @JsonProperty('listinfo', ListInfo, false)\n    public listinfo: ListInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { StringLiteral } from '../../shared/strings';\n\n@JsonObject('ListNodeInfo')\nexport class ListNodeInfo {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('name', String, true)\n    public name: string = undefined;\n\n    @JsonProperty('projectIri', String, true)\n    public projectIri: string = undefined;\n\n    @JsonProperty('isRootNode', Boolean, true)\n    public isRootNode: boolean = undefined;\n\n    @JsonProperty('labels', [StringLiteral])\n    public labels: StringLiteral[] = undefined;\n\n    @JsonProperty('comments', [StringLiteral])\n    public comments: StringLiteral[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNodeInfo } from './list-node-info';\n\n@JsonObject('ListNodeInfoResponse')\nexport class ListNodeInfoResponse {\n\n    @JsonProperty('nodeinfo', ListNodeInfo, false)\n    public nodeinfo: ListNodeInfo = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { List } from './list';\n\n@JsonObject('ListResponse')\nexport class ListResponse {\n\n    @JsonProperty('list', List, false)\n    public list: List = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { ListNodeInfo } from './list-node-info';\n\n@JsonObject('ListsResponse')\nexport class ListsResponse {\n\n    @JsonProperty('lists', [ListNodeInfo], false)\n    public lists: ListNodeInfo[] = undefined;\n}\n\n\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('OntologyInfoShort')\nexport class OntologyInfoShort {\n\n    @JsonProperty('ontologyIri', String)\n    public ontologyIri: string = undefined;\n\n    @JsonProperty('ontologyName', String)\n    public ontologyName: string = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject('PermissionData')\nexport class PermissionData {\n\n    @JsonProperty('groupsPerProject', Object)\n    public groupsPerProject: any = undefined;\n\n    @JsonProperty('administrativePermissionsPerProject', Object)\n    public administrativePermissionsPerProject: any = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Group } from '../groups/group';\nimport { PermissionData } from '../permissions/permission-data';\nimport { Project } from '../projects/project';\n\n@JsonObject('User')\nexport class User {\n\n    @JsonProperty('id', String)\n    public id: string = undefined;\n\n    @JsonProperty('email', String)\n    public email: string = undefined;\n\n    @JsonProperty('username', String)\n    public username: string = undefined;\n\n    @JsonProperty('password', String, true)\n    public password: string = undefined;\n\n    @JsonProperty('token', String, true)\n    public token: string = undefined;\n\n    @JsonProperty('givenName', String)\n    public givenName: string = undefined;\n\n    @JsonProperty('familyName', String)\n    public familyName: string = undefined;\n\n    @JsonProperty('status', Boolean)\n    public status: boolean = undefined;\n\n    @JsonProperty('lang', String)\n    public lang: string = undefined;\n\n    @JsonProperty('groups', [Group])\n    public groups: Group[] = undefined;\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n    @JsonProperty('sessionId', String, true)\n    public sessionId: string = undefined;\n\n    @JsonProperty('permissions', PermissionData)\n    public permissions: PermissionData = undefined;\n\n    @JsonProperty('systemAdmin', Boolean, true)\n    public systemAdmin?: boolean = false;\n\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from '../users/user';\n\n@JsonObject('ProjectMembersResponse')\nexport class ProjectMembersResponse {\n    @JsonProperty('members', [User])\n    public members: User[] = undefined;\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n\n@JsonObject('ProjectResponse')\nexport class ProjectResponse {\n\n    @JsonProperty('project', Project)\n    public project: Project = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { Project } from './project';\n\n@JsonObject('ProjectsResponse')\nexport class ProjectsResponse {\n\n    @JsonProperty('projects', [Project])\n    public projects: Project[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\n\n@JsonObject\nexport class CurrentUser {\n\n    @JsonProperty('name', String)\n    public name: string = undefined;\n\n    @JsonProperty('jwt', String, true)\n    public jwt: string = undefined;\n\n    @JsonProperty('lang', String, true)\n    public lang: string = undefined;\n\n    @JsonProperty('sysAdmin', Boolean)\n    public sysAdmin: boolean = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UsersResponse')\nexport class UsersResponse {\n\n    @JsonProperty('users', [User])\n    public users: User[] = undefined;\n\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { User } from './user';\n\n@JsonObject('UserResponse')\nexport class UserResponse {\n\n    @JsonProperty('user', User)\n    public user: User = undefined;\n}\n","import { ReadResource } from '../../../';\nimport { OntologyInformation } from '../../../../services';\nimport { KnoraConstants } from '../../knora-constants';\nimport { DateRangeSalsah, DateSalsah } from '../../shared/date';\n\n/**\n * An abstract interface representing any value object.\n */\nexport interface ReadPropertyItem {\n\n    /**\n     * The value object's Iri.\n     */\n    readonly id: string;\n\n    /**\n     * The value object's type.\n     */\n    readonly type: string;\n\n    /**\n     * The property pointing to the value object.\n     */\n    readonly propIri: string;\n\n    /**\n     * Gets the class name of the class that implements this interface.\n     *\n     * @returns {string}\n     */\n    getClassName(): string;\n\n    /**\n     * Gets the value as a string (complexity of the value possibly reduced).\n     *\n     * @returns {string}\n     */\n    getContent(): string;\n}\n\n/**\n * Abstract class representing a text value object with or without markup.\n */\nexport abstract class ReadTextValue implements ReadPropertyItem {\n\n    abstract id: string;\n\n    readonly type: string = KnoraConstants.TextValue;\n\n    abstract propIri: string;\n\n    abstract getClassName(): string;\n\n    abstract getContent(): string;\n}\n\n/**\n * Represents a text value object without markup (mere character string).\n */\nexport class ReadTextValueAsString extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly str: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsString;\n    }\n\n    getContent() {\n        return this.str;\n    }\n}\n\n/**\n * Represents resources referred to by standoff links.\n */\nexport class ReferredResourcesByStandoffLink {\n    [index: string]: ReadResource;\n}\n\n/**\n * Represents a text value object with markup that has been turned into HTML.\n */\nexport class ReadTextValueAsHtml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly html: string, readonly referredResources: ReferredResourcesByStandoffLink) {\n        super();\n    }\n\n    /**\n     * Gets information about a resource referred to by a standoff link from a text value.\n     *\n     * @param {string} resourceIri the Iri of the referred resource.\n     * @param {OntologyInformation} ontologyInfo ontology information.\n     * @returns {string} information about the referred resource's class and its label.\n     */\n\n\n    getReferredResourceInfo(resourceIri: string, ontologyInfo: OntologyInformation) {\n        if (this.referredResources !== undefined && this.referredResources[resourceIri] !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResources[resourceIri].type);\n\n            return this.referredResources[resourceIri].label + ` (${resClassLabel})`;\n        } else {\n            return 'no information found about referred resource (target of standoff link)';\n        }\n    }\n\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsHtml;\n    }\n\n    getContent() {\n        return this.html;\n    }\n\n}\n\n/**\n * Represents a text value object with markup as XML.\n */\nexport class ReadTextValueAsXml extends ReadTextValue {\n\n    constructor(readonly id: string, readonly propIri, readonly xml: string, readonly mappingIri: string) {\n        super();\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextValueAsXml;\n    }\n\n    getContent() {\n        return this.xml;\n    }\n\n}\n\n\n/**\n * Represents a date value object.\n */\nexport class ReadDateValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly calendar: string,\n        readonly startYear: number,\n        readonly endYear: number,\n        readonly startEra: string,\n        readonly endEra: string,\n        readonly startMonth?: number,\n        readonly endMonth?: number,\n        readonly startDay?: number,\n        readonly endDay?: number) {\n    }\n\n    readonly type = KnoraConstants.DateValue;\n\n    private separator = '/';\n\n    getDateSalsah(): DateSalsah | DateRangeSalsah {\n        if (this.startYear === this.endYear && this.startMonth === this.endMonth && this.startDay === this.endDay && this.startEra === this.endEra) {\n            // precise date\n            return new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay);\n        } else {\n            // date period\n            return new DateRangeSalsah(new DateSalsah(this.calendar, this.startEra, this.startYear, this.startMonth, this.startDay), new DateSalsah(this.calendar, this.endEra, this.endYear, this.endMonth, this.endDay));\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadDateValue;\n    }\n\n    getContent() {\n        return this.getDateSalsah().getDateAsString();\n    }\n}\n\n/**\n * Represents a link value object (reification).\n */\nexport class ReadLinkValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly referredResourceIri: string, readonly referredResource?: ReadResource) {\n\n    }\n\n    readonly type = KnoraConstants.LinkValue;\n\n    getReferredResourceInfo(ontologyInfo: OntologyInformation) {\n        if (this.referredResource !== undefined) {\n\n            const resClassLabel = ontologyInfo.getLabelForResourceClass(this.referredResource.type);\n\n            return this.referredResource.label + ` (${resClassLabel})`;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadLinkValue;\n    }\n\n    getContent() {\n        if (this.referredResource !== undefined) {\n            return this.referredResource.label;\n        } else {\n            return this.referredResourceIri;\n        }\n    }\n}\n\n/**\n * Represents an integer value object.\n */\nexport class ReadIntegerValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly integer: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntegerValue;\n    }\n\n    getContent() {\n        return this.integer.toString();\n    }\n\n}\n\n/**\n * Represents a decimal value object.\n */\nexport class ReadDecimalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly decimal: number) {\n\n    }\n\n    readonly type = KnoraConstants.DecimalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadDecimalValue;\n    }\n\n    getContent() {\n        return this.decimal.toString();\n    }\n}\n\n/**\n * Represents a still image value object.\n */\nexport class ReadStillImageFileValue implements ReadPropertyItem {\n\n    constructor(\n        readonly id: string,\n        readonly propIri,\n        readonly imageFilename: string,\n        readonly imageServerIIIFBaseURL: string,\n        readonly imagePath: string,\n        readonly dimX: number,\n        readonly dimY: number) {\n\n        // if the image is a jpeg, it is a preview image\n        this.isPreview = imageFilename.endsWith('.jpg');\n\n    }\n\n    readonly type = KnoraConstants.StillImageFileValue;\n\n    readonly isPreview: boolean;\n\n    makeIIIFUrl(reduceFactor: number): string {\n\n        if (this.isPreview) {\n            return this.imagePath;\n        } else {\n            let percentage = Math.floor(100 / reduceFactor);\n\n            percentage = (percentage > 0 && percentage <= 100) ? percentage : 50;\n\n            return this.imageServerIIIFBaseURL + '/' + this.imageFilename + '/full/pct:' + percentage.toString() + '/0/default.jpg';\n        }\n\n    }\n\n    getClassName(): string {\n        return KnoraConstants.ReadStillImageFileValue;\n    }\n\n    getContent() {\n        return this.imagePath;\n    }\n}\n\n/**\n * Represents a text representation value object\n */\nexport class ReadTextFileValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri, readonly textFilename: string, readonly textFileURL: string) {\n\n    }\n\n    readonly type = KnoraConstants.TextFileValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadTextFileValue;\n    }\n\n    getContent() {\n        return this.textFileURL;\n    }\n\n}\n\n/**\n * Represents a color value object.\n */\nexport class ReadColorValue implements ReadPropertyItem {\n\n    constructor(readonly id: string,\n        readonly propIri,\n        readonly colorHex: string) {\n    }\n\n    readonly type = KnoraConstants.ColorValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadColorValue;\n    }\n\n    getContent() {\n        return this.colorHex;\n    }\n}\n\n/**\n * Represents a point in a 2D-coordinate system (for geometry values).\n */\nexport class Point2D {\n    constructor(public x: number, public y: number) {\n    }\n}\n\n/**\n * Represents a geometry value parsed from JSON.\n */\nexport class RegionGeometry {\n    constructor(public status: string,\n        public lineColor: string,\n        public lineWidth: number,\n        public points: Point2D[],\n        public type: string,\n        public radius?: Point2D\n    ) {\n    }\n}\n\n/**\n * Represents a geometry value object.\n */\nexport class ReadGeomValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly geometryString: string) {\n\n        const geometryJSON = JSON.parse(geometryString);\n\n        const points: Point2D[] = [];\n        for (const point of geometryJSON.points) {\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        let radius;\n        if (geometryJSON.radius) {\n            radius = new Point2D(geometryJSON.radius.x, geometryJSON.radius.y);\n        }\n\n        this.geometry = new RegionGeometry(\n            geometryJSON.status,\n            geometryJSON.lineColor,\n            geometryJSON.lineWidth,\n            points,\n            geometryJSON.type,\n            radius\n        );\n\n    }\n\n    readonly geometry: RegionGeometry;\n\n    readonly type = KnoraConstants.GeomValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadGeomValue;\n    }\n\n    getContent() {\n        return this.geometryString;\n    }\n}\n\n/**\n * Represents a URI value object.\n */\nexport class ReadUriValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly uri: string) {\n\n    }\n\n    readonly type = KnoraConstants.UriValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadUriValue;\n    }\n\n    getContent() {\n        return this.uri;\n    }\n\n}\n\n/**\n * Represents a Boolean value object.\n */\nexport class ReadBooleanValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly bool: boolean) {\n\n    }\n\n    readonly type = KnoraConstants.BooleanValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadBooleanValue;\n    }\n\n    getContent() {\n        return this.bool.toString();\n    }\n\n}\n\n/**\n * Represents an interval value object.\n */\nexport class ReadIntervalValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly intervalStart: number, readonly intervalEnd: number) {\n\n    }\n\n    readonly type = KnoraConstants.IntervalValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadIntervalValue;\n    }\n\n    getContent() {\n        return this.intervalStart.toString() + '-' + this.intervalEnd;\n    }\n\n}\n\n/**\n * Represents an interval value object.\n */\nexport class ReadListValue implements ReadPropertyItem {\n\n    constructor(readonly id: string, readonly propIri: string, readonly listNodeIri: string, readonly listNodeLabel: string, ) {\n\n    }\n\n    readonly type = KnoraConstants.ListValue;\n\n    getClassName(): string {\n        return KnoraConstants.ReadListValue;\n    }\n\n    getContent() {\n        return this.listNodeLabel;\n    }\n\n}\n","import { ReadProperties, StillImageRepresentation } from '../../../';\n\n/**\n * Represents a resource and its properties.\n */\nexport class ReadResource {\n\n    /**\n     *\n     * @param {string} id the resource's Iri.\n     * @param {string} type the resource's type (class).\n     * @param {string} label the resource's rdfs:label.\n     * @param {Array<ReadResource>} incomingRegions regions pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingStillImageRepresentations still image representations pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {Array<ReadResource>} incomingLinks resources pointing to this resource, if any (possibly to be queried by additional requests).\n     * @param {StillImageRepresentation[]} stillImageRepresentationsToDisplay  still image representations to be displayed for this resource, if any (possibly to be queried by additional requests).\n     * @param {ReadProperties} properties the resources's properties.\n     */\n    constructor(\n        public readonly id: string,\n        public readonly type: string,\n        public readonly label: string,\n        public incomingRegions: Array<ReadResource>,\n        public incomingStillImageRepresentations: Array<ReadResource>,\n        public incomingLinks: Array<ReadResource>,\n        public stillImageRepresentationsToDisplay: StillImageRepresentation[],\n        public readonly properties?: ReadProperties) {\n    }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpParams, HttpResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceError } from '../declarations/api-service-error';\nimport { ApiServiceResult } from '../declarations/api-service-result';\nimport { KuiCoreConfig } from '../declarations/core.config';\nimport { from } from 'rxjs';\n\ndeclare let require: any; // http://stackoverflow.com/questions/34730010/angular2-5-minute-install-bug-require-is-not-defined\nconst jsonld = require('jsonld');\n\n@Injectable({\n    providedIn: 'root',\n})\nexport abstract class ApiService {\n\n    // if is loading, set it true;\n    // it can be used in components\n    // for progress loader element\n    loading = false;\n\n    protected constructor(public http: HttpClient,\n                          @Inject('config') public config: KuiCoreConfig) {\n    }\n\n    /**\n     * GET\n     *\n     * @param {string} path the URL for the GET request.\n     * @param {HttpParams} params the parameters for the GET request.\n     * @returns Observable of any\n     */\n    httpGet(path: string, params?: HttpParams): Observable<any> {\n\n        this.loading = true;\n\n        return this.http.get(this.config.api + path, {observe: 'response', params: params}).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * Processes JSON-LD returned by Knora.\n     * Expands Iris and creates an empty context object.\n     *\n     * @param {ApiServiceResult} resourceResponse\n     */\n    protected processJSONLD(resourceResponse: ApiServiceResult): Observable<object> {\n\n        const resPromises = jsonld.promises;\n        // compact JSON-LD using an empty context: expands all Iris\n        const resPromise = resPromises.compact(resourceResponse.body, {});\n\n        // convert promise to Observable and return it\n        // https://www.learnrxjs.io/operators/creation/frompromise.html\n        return from(resPromise);\n\n    }\n\n    /**\n     * POST\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPost(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.post(this.config.api + path, body, {observe: 'response'}).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                const result = new ApiServiceResult();\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n\n    }\n\n    /**\n     * PUT\n     *\n     * @param {string} path\n     * @param {any} body\n     * @returns Observable of any\n     */\n    httpPut(path: string, body?: any): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.put(this.config.api + path, body, {observe: 'response'}).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n    /**\n     * DELETE\n     *\n     * @param {string} path\n     * @returns Observable of any\n     */\n    httpDelete(path: string): Observable<any> {\n\n        this.loading = true;\n\n        // const headers = this.setHeaders(); --> this is now done by the interceptor from @knora/authentication\n\n        return this.http.delete(this.config.api + path, {observe: 'response'}).pipe(\n            map((response: HttpResponse<any>): ApiServiceResult => {\n                this.loading = false;\n\n                // console.log(response);\n\n                const result = new ApiServiceResult();\n                result.status = response.status;\n                result.statusText = response.statusText;\n                result.url = path;\n                result.body = response.body;\n                return result;\n\n            }),\n            catchError((error: HttpErrorResponse) => {\n                this.loading = false;\n\n                // console.error(error);\n\n                return this.handleRequestError(error);\n            })\n        );\n    }\n\n\n    /**\n     * handle request error in case of server error\n     *\n     * @param {HttpErrorResponse} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleRequestError(error: HttpErrorResponse): Observable<ApiServiceError> {\n        // console.error(error);\n        const serviceError = new ApiServiceError();\n        serviceError.status = error.status;\n        serviceError.statusText = error.statusText;\n        serviceError.errorInfo = error.message;\n        serviceError.url = error.url;\n        return throwError(serviceError);\n    }\n\n    /**\n     * handle json error in case of type error in json response (json2typescript)\n     *\n     * @param {any} error\n     * @returns Observable of ApiServiceError\n     */\n    protected handleJsonError(error: any): Observable<ApiServiceError> {\n\n        if (error instanceof ApiServiceError) return throwError(error);\n\n        const serviceError = new ApiServiceError();\n        serviceError.status = -1;\n        serviceError.statusText = 'Invalid JSON';\n        serviceError.errorInfo = error;\n        serviceError.url = '';\n        return throwError(serviceError);\n\n    }\n\n    // the following method is replaced by the JwtInterceptor\n    /*\n    protected setHeaders(): HttpHeaders {\n        let currentUser: CurrentUser;\n        let subscription: Subscription;\n\n        // get key from local storage\n        const key = localStorage.getItem('session_id');\n\n        if (key && key !== null) {\n            subscription = this._acs.get(key)\n                .subscribe(\n                    (result: any) => {\n                        currentUser = result;\n                        console.log('api service -- setHeaders -- currentUser from acs', currentUser);\n                    },\n                    (error: any) => {\n                        console.error(error);\n                        return new HttpHeaders();\n                    }\n                );\n\n            if (currentUser) {\n                return new HttpHeaders({\n                    'Authorization': `Bearer ${currentUser.token}`\n                });\n            }\n        } else {\n            return new HttpHeaders();\n        }\n\n    }\n    */\n    /*\n    /!**\n     * Appends to existing options if they exist.\n     * @param {HttpHeaders} options\n     * @returns {HttpHeaders}\n     *!/\n    protected appendToOptions(options: any): any {\n\n        let headers: HttpHeaders;\n\n        if (!options) {\n            headers = this.appendAuthorizationHeader();\n            console.log('2a) ', headers);\n            options = {\n                headers\n            };\n            console.log('2b) ', options);\n\n        } else {\n            // have options\n            if (!options['headers']) {\n                // no headers set\n                options['headers'] = new HttpHeaders();\n                console.log('3: ', options);\n            } else {\n                // have headers, need to append to those\n                options['headers'] = this.appendAuthorizationHeader(options['headers']);\n                console.log('4: ', options);\n            }\n        }\n        return options;\n    }\n*/\n    /*\n    /!**\n     * Appends to existing headers if they exist.\n     * @param {Headers} headers\n     * @returns {Headers}\n     *!/\n    protected appendAuthorizationHeader(headers?: HttpHeaders): HttpHeaders {\n\n\n        if (!headers) {\n            headers = new HttpHeaders();\n        }\n\n        if (JSON.parse(localStorage.getItem('currentUser'))) {\n            const token = JSON.parse(localStorage.getItem('currentUser')).token;\n\n//            headers.append('Authorization', 'Bearer ' + token);\n\n            headers['Authorization'] = `Bearer ${JSON.parse(localStorage.getItem('currentUser')).token}`;\n        }\n        return headers;\n    }\n*/\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KnoraConstants } from '../../declarations/api/knora-constants';\nimport { ApiServiceResult } from '../../declarations/api-service-result';\nimport { NewOntology } from '../../declarations/api/v2/ontology/new-ontology';\nimport { ApiService } from '../api.service';\n\n/**\n * Requests ontology information from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class OntologyService extends ApiService {\n\n\n    // ------------------------------------------------------------------------\n    // GET list of ontologies\n    // ------------------------------------------------------------------------\n\n    /**\n     * DEPRECATED: You should use getAllOntologies()\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getOntologiesMetadata(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the metadata about all existing ontologies from Knora's ontologies route.\n     *\n     * @returns Observable<ApiServiceResult> - the metadata of all ontologies.\n     */\n    getAllOntologies(): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata');\n    }\n\n    /**\n     * Requests the ontologies of a specific project\n     *\n     * @param projectIri\n     * @returns Observable<ApiServiceResult> - the metadata of project ontologies.\n     */\n    getProjectOntologies(projectIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/metadata/' + encodeURIComponent(projectIri));\n    }\n\n\n    // ------------------------------------------------------------------------\n    // GET ontology\n    // ------------------------------------------------------------------------\n\n    /**\n     * Requests all entity definitions for the given ontologies from Knora's ontologies route.\n     *\n     * @param {string} ontologyIri the Iris of the named graphs whose resource classes are to be returned.\n     * @returns Observable<ApiServiceResult> - the requested ontology.\n     */\n    getAllEntityDefinitionsForOntologies(ontologyIri: string): Observable<ApiServiceResult> {\n        return this.httpGet('/v2/ontologies/allentities/' + encodeURIComponent(ontologyIri));\n    }\n\n    /**\n     * Requests information about the given resource classes from Knora's ontologies route.\n     *\n     * @param {string[]} resourceClassIris the Iris of the resource classes to be queried.\n     * @returns Observable<ApiServiceResult> - the requested resource class definitions.\n     */\n    getResourceClasses(resourceClassIris: Array<string>): Observable<ApiServiceResult> {\n\n        if (resourceClassIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No resource class Iris given for call of OntologyService.getResourceClasses'));\n        }\n\n        let resClassUriEnc = '';\n\n        resourceClassIris.forEach(function (resClassIri) {\n            resClassUriEnc = resClassUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/classes' + resClassUriEnc);\n    }\n\n    /**\n     * Requests properties from Knora's ontologies route.\n     *\n     * @param {string[]} propertyIris the Iris of the properties to be queried.\n     * @returns Observable<ApiServiceResult> - the requested properties.\n     */\n    getProperties(propertyIris: string[]): Observable<ApiServiceResult> {\n\n        if (propertyIris.length === 0) {\n            // no resource class Iris are given to query for, return a failed Observer\n            return Observable.create(observer => observer.error('No property Iris given for call of OntologyService.getProperties'));\n        }\n\n        let propertiesUriEnc = '';\n\n        propertyIris.forEach(function (resClassIri) {\n            propertiesUriEnc = propertiesUriEnc + '/' + encodeURIComponent(resClassIri.toString());\n        });\n\n        return this.httpGet('/v2/ontologies/properties' + propertiesUriEnc);\n\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new ontology.\n     *\n     * @param {NewOntology} data Data contains: projectIri, name, label\n     * @returns Observable<ApiServiceResult>\n     */\n    createOntology(data: NewOntology): Observable<ApiServiceResult> {\n        const path = '/v2/ontologies';\n\n        const ontology = {\n            'knora-api:ontologyName': data.name,\n            'knora-api:attachedToProject': {\n                '@id': data.projectIri,\n            },\n            'rdfs:label': data.label,\n            '@context': {\n                'rdfs': KnoraConstants.RdfsSchema,\n                'knora-api': KnoraConstants.KnoraApiV2WithValueObjectPath\n            }\n        };\n\n        return this.httpPost(path, ontology).pipe(\n            map((result: ApiServiceResult) => result.body),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { ReadResource } from './read-resource';\nimport { OntologyInformation } from '../../../../services/v2/ontology-cache.service';\n\n/**\n * Represents a sequence of resources.\n */\nexport class ReadResourcesSequence {\n\n    /**\n     * Information about the entities used in the given collection of `ReadResource`.\n     */\n    public readonly ontologyInformation: OntologyInformation = new OntologyInformation({}, {}, {});\n\n    /**\n     *\n     * @param {Array<ReadResource>} resources given sequence of resources.\n     * @param {number} numberOfResources number of given resources.\n     */\n    constructor(public readonly resources: Array<ReadResource>, public readonly numberOfResources: number) {\n    }\n\n}\n","/**\n * Represents the result of a count query.\n */\nexport class CountQueryResult {\n\n    /**\n     *\n     * @param numberOfResults total number of results for a query.\n     */\n    constructor(public readonly numberOfResults: number) {\n\n    }\n}\n","import { ReadStillImageFileValue } from '../../../';\nimport { ImageRegion } from './image-region';\n\n/**\n * Represents an image including its regions.\n */\n\nexport class StillImageRepresentation {\n\n    /**\n     *\n     * @param {ReadStillImageFileValue} stillImageFileValue a [[ReadStillImageFileValue]] representing an image.\n     * @param {ImageRegion[]} regions the regions belonging to the image.\n     */\n    constructor(readonly stillImageFileValue: ReadStillImageFileValue, readonly regions: ImageRegion[]) {\n\n    }\n\n}\n","import { ReadGeomValue, ReadResource } from '../../../';\nimport { KnoraConstants } from '../../knora-constants';\n\n/**\n * Represents a region.\n * Contains a reference to the resource representing the region and its geometries.\n */\n\nexport class ImageRegion {\n\n    /**\n     *\n     * @param {ReadResource} regionResource a resource of type Region\n     */\n    constructor(readonly regionResource: ReadResource) {\n\n    }\n\n    /**\n     * Get all geometry information belonging to this region.\n     *\n     * @returns {ReadGeomValue[]}\n     */\n    getGeometries() {\n        return this.regionResource.properties[KnoraConstants.hasGeometry] as ReadGeomValue[];\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { KuiCoreConfig } from './declarations';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        HttpClientModule\n    ],\n    declarations: [],\n    exports: [\n        HttpClientModule\n    ],\n    providers: [\n        {provide: 'config', useValue: KuiCoreConfig}\n    ]\n})\n\n\nexport class KuiCoreModule {\n    /**\n     *\n     * @param {KuiCoreConfig} config\n     * @returns {ModuleWithProviders}\n     */\n    static forRoot(config: KuiCoreConfig): ModuleWithProviders {\n        // get the app environment configuration here\n        // console.log(config);\n        return {\n            ngModule: KuiCoreModule,\n            providers: [\n                {provide: 'config', useValue: config}\n            ]\n        };\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiServiceResult, Group, GroupResponse, GroupsResponse } from '../../declarations/';\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about group from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GroupsService extends ApiService {\n\n    private path: string = '/admin/groups';\n\n    /**\n     * Return a list of all groups.\n     *\n     * @returns Observable<Group[]>\n     */\n    getAllGroups(): Observable<Group[]> {\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupsResponse).groups),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a group object (filter by IRI).\n     *\n     * @param {string} iri\n     * @returns Observable<Group>\n     */\n    getGroupByIri(iri: string): Observable<Group> {\n        this.path += '/' + encodeURIComponent(iri);\n\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(GroupResponse).group),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n    ApiServiceResult,\n    List,\n    ListCreatePayload,\n    ListInfo,\n    ListInfoResponse,\n    ListInfoUpdatePayload,\n    ListNodeInfo,\n    ListNodeInfoResponse,\n    ListResponse,\n    ListsResponse\n} from '../../declarations';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about lists from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ListsService extends ApiService {\n\n    private path: string = '/admin/lists';\n\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all lists.\n     *\n     * @param {string} [projectIri]\n     * @returns Observable<ListNodeInfo[]>\n     */\n    getLists(projectIri?: string): Observable<ListNodeInfo[]> {\n        if (projectIri) {\n            this.path += '?projectIri=' + encodeURIComponent(projectIri);\n        }\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListsResponse).lists),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list object.\n     *\n     * @param {string} listIri\n     * @returns Observable<List>\n     */\n    getList(listIri: string): Observable<List> {\n        return this.httpGet(this.path + '/' + encodeURIComponent(listIri)).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list info object.\n     *\n     * @param {string} listIri\n     * @returns Observable<ListInfo>\n     */\n    getListInfo(listIri: string): Observable<ListInfo> {\n        this.path += '/infos/' + encodeURIComponent(listIri);\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Return a list node info object.\n     *\n     * @param {string} nodeIri\n     * @returns Observable<ListNodeInfo>\n     */\n    getListNodeInfo(nodeIri: string): Observable<ListNodeInfo> {\n        this.path += '/nodes/' + encodeURIComponent(nodeIri);\n        return this.httpGet(this.path).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListNodeInfoResponse).nodeinfo),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new list.\n     *\n     * @param {ListCreatePayload} payload\n     * @returns Observable<List>\n     */\n    createList(payload: ListCreatePayload): Observable<List> {\n        return this.httpPost(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListResponse).list),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit list data.\n     *\n     * @param {ListInfoUpdatePayload} payload\n     * @returns Observable<ListInfo>\n     */\n    updateListInfo(payload: ListInfoUpdatePayload): Observable<ListInfo> {\n        this.path += '/infos/' + encodeURIComponent(payload.listIri);\n        return this.httpPut(this.path, payload).pipe(\n            map((result: ApiServiceResult) => result.getBody(ListInfoResponse).listinfo),\n            catchError(this.handleJsonError)\n        );\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { ApiServiceResult, Project, ProjectMembersResponse, ProjectResponse, ProjectsResponse, User } from '../../declarations/';\n\nimport { ApiService } from '../api.service';\n\n/**\n * Request information about projects from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProjectsService extends ApiService {\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all projects.\n     *\n     * @returns Observable<Project[]>\n     */\n    getAllProjects(): Observable<Project[]> {\n        return this.httpGet('/admin/projects').pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectsResponse).projects),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    getProjectByIri(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/' + encodeURIComponent(iri);\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortname(shortname: string): Observable<Project> {\n        const url = '/admin/projects/' + shortname + '?identifier=shortname';\n        return this.getProject(url);\n    }\n\n    /**\n     * Returns a project object.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<Project>\n     */\n    getProjectByShortcode(shortcode: string): Observable<Project> {\n        const url = '/admin/projects/' + shortcode + '?identifier=shortcode';\n        return this.getProject(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<Project>\n     */\n    protected getProject(url: string): Observable<Project> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is project id (iri).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByIri(iri: string): Observable<User[]> {\n        const url = '/admin/projects/members/' + encodeURIComponent(iri);\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortname.\n     *\n     * @param {string} shortname short name that is used to identify the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortname(shortname: string): Observable<User[]> {\n        const url = '/admin/projects/members/' + shortname + '?identifier=shortname';\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * Returns all project members.\n     * Project identifier is shortcode.\n     *\n     * @param {string} shortcode hexadecimal code that uniquely identifies the project\n     * @returns Observable<User[]>\n     */\n    getProjectMembersByShortcode(shortcode: string): Observable<User[]> {\n        const url = '/admin/projects/members/' + shortcode + '?identifier=shortcode';\n        return this.getProjectMembers(url);\n    }\n\n    /**\n     * @private\n     * Helper method combining project member retrieval.\n     *\n     * @param {string} url\n     * @returns Observable<User[]>\n     */\n    protected getProjectMembers(url: string): Observable<User[]> {\n        return this.httpGet(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectMembersResponse).members),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new project.\n     *\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    createProject(data: any): Observable<Project> {\n        const url: string = '/admin/projects';\n        return this.httpPost(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n    /**\n     * Edit project data.\n     *\n     * @param {string} iri identifier of the project\n     * @param {any} data\n     * @returns Observable<Project>\n     */\n    updateProject(iri: string, data: any): Observable<Project> {\n        const url: string = '/admin/projects/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    /**\n     * Activate project (if it was deleted).\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    activateProject(iri: string): Observable<Project> {\n        const data: any = {\n            status: true\n        };\n\n        const url: string = '/admin/projects/' + encodeURIComponent(iri);\n\n        return this.httpPut(url, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete (set inactive) project.\n     *\n     * @param {string} iri identifier of the project\n     * @returns Observable<Project>\n     */\n    deleteProject(iri: string): Observable<Project> {\n        const url: string = '/admin/projects/' + encodeURIComponent(iri);\n\n        return this.httpDelete(url).pipe(\n            map((result: ApiServiceResult) => result.getBody(ProjectResponse).project),\n            catchError(this.handleJsonError)\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ApiService } from '../api.service';\nimport {\n    ApiServiceResult,\n    User,\n    UserResponse,\n    UsersResponse\n} from '../../declarations/';\n\n/**\n * This service uses the Knora admin API and handles all user data.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends ApiService {\n\n    usersUrl: string = this.config.api + '/admin/users';\n\n\n    // ------------------------------------------------------------------------\n    // GET\n    // ------------------------------------------------------------------------\n\n    /**\n     * Returns a list of all users.\n     *\n     * @returns Observable<User[]>\n     */\n    getAllUsers(): Observable<User[]> {\n        return this.httpGet('/admin/users').pipe(\n            map((result: ApiServiceResult) => result.getBody(UsersResponse).users),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Get user by username, email or by iri.\n     *\n     * @param {string} identifier - Get user by username, email or by iri\n     * @returns Observable<User>\n     */\n    getUser(identifier: string): Observable<User> {\n        const path = '/admin/users/' + encodeURIComponent(identifier);\n        return this.httpGet(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Deprecated! Please use getUser(identifier: string) only!\n     * Get user by email\n     *\n     * @ignore\n     *\n     * @param {string} email\n     * @returns {Observable<User>}\n     */\n    getUserByEmail(email: string): Observable<User> {\n        return this.getUser(email);\n    }\n\n    /**\n     * Deprecated! Please use getUser(identifier: string) only!\n     *\n     * @ignore\n     *\n     * @param {string} iri\n     * @returns {Observable<User>}\n     */\n    getUserByIri(iri: string): Observable<User> {\n        return this.getUser(iri);\n    }\n\n    // ------------------------------------------------------------------------\n    // POST\n    // ------------------------------------------------------------------------\n\n    /**\n     * Create new user.\n     *\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    createUser(data: any): Observable<User> {\n        const path = '/admin/users';\n        return this.httpPost(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to a project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/projects/' + encodeURIComponent(userIri) + '/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Add user to an admin project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    addUserToProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/projects-admin/' + encodeURIComponent(userIri) + '/' + encodeURIComponent(projectIri);\n        return this.httpPost(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Delete user of an admin project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProjectAdmin(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/projects-admin/' + encodeURIComponent(userIri) + '/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n\n    // ------------------------------------------------------------------------\n    // PUT\n    // ------------------------------------------------------------------------\n\n\n    /**\n     * Add user to the admin system.\n     *\n     * @param {string} userIri\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    addUserToSystemAdmin(userIri: string, data: any): Observable<User> {\n        const path = '/admin/users/' + encodeURIComponent(userIri);\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    /**\n     * Activate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    activateUser(userIri: string): Observable<User> {\n        const data: any = {\n            status: true\n        };\n        return this.updateUser(userIri, data);\n    }\n\n\n    /**\n     * Update own password.\n     *\n     * @param {string} userIri\n     * @param {string} oldPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateOwnPassword(userIri: string, oldPassword: string, newPassword: string): Observable<User> {\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: oldPassword\n        };\n        return this.updateUser(userIri, data);\n    }\n\n    /**\n     * Update password of another user (not own).\n     *\n     * @param {string} userIri\n     * @param {string} requesterPassword\n     * @param {string} newPassword\n     * @returns Observable<User>\n     */\n    updateUsersPassword(userIri: string, requesterPassword: string, newPassword: string): Observable<User> {\n        const data = {\n            newPassword: newPassword,\n            requesterPassword: requesterPassword\n        };\n        return this.updateUser(userIri, data);\n    }\n\n\n    /**\n     * Update user data.\n     *\n     * @param {string} userIri\n     * @param {any} data\n     * @returns Observable<User>\n     */\n    updateUser(userIri: string, data: any): Observable<User> {\n\n        const path = '/admin/users/' + encodeURIComponent(userIri);\n\n        return this.httpPut(path, data).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n\n    // ------------------------------------------------------------------------\n    // DELETE\n    // ------------------------------------------------------------------------\n\n    /**\n     * Delete / deactivate user.\n     *\n     * @param {string} userIri\n     * @returns Observable<User>\n     */\n    deleteUser(userIri: string): Observable<User> {\n        const path = '/admin/users/' + encodeURIComponent(userIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n\n    }\n\n    /**\n     * Remove user from project.\n     *\n     * @param {string} userIri\n     * @param {string} projectIri\n     * @returns Observable<User>\n     */\n    removeUserFromProject(userIri: string, projectIri: string): Observable<User> {\n        const path = '/admin/users/projects/' + encodeURIComponent(userIri) + '/' + encodeURIComponent(projectIri);\n        return this.httpDelete(path).pipe(\n            map((result: ApiServiceResult) => result.getBody(UserResponse).user),\n            catchError(this.handleJsonError)\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService {\n\n  private subject = new Subject<any>();\n\n  setLanguage(lang: string) {\n    this.subject.next({ var: lang });\n  }\n  getLanguage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { KuiCoreConfig } from '../../declarations';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatusMsgService {\n\n  constructor(private _http: HttpClient,\n    @Inject('config') public config: KuiCoreConfig) {\n  }\n\n  /**\n  * this method get the status messages from the statusMsg.json file\n  * which are defined here: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n  * and here: http://www.w3schools.com/tags/ref_httpmessages.asp\n  *\n  */\n  getStatusMsg(): Observable<any> {\n\n    return this._http.get(this.config.app + '/assets/i18n/statusMsg.json')\n      .pipe(map(\n        (res: any) => {\n          return res;\n        },\n        err => {\n          console.error(err);\n        }\n      )\n      );\n\n  };\n}\n","import {\n    CountQueryResult,\n    KnoraConstants,\n    ReadBooleanValue,\n    ReadColorValue,\n    ReadDateValue,\n    ReadDecimalValue,\n    ReadGeomValue,\n    ReadIntegerValue,\n    ReadIntervalValue,\n    ReadLinkValue,\n    ReadListValue,\n    ReadProperties,\n    ReadPropertyItem,\n    ReadResource,\n    ReadResourcesSequence,\n    ReadStillImageFileValue,\n    ReadTextFileValue,\n    ReadTextValueAsHtml,\n    ReadTextValueAsString,\n    ReadTextValueAsXml,\n    ReadUriValue,\n    ReferredResourcesByStandoffLink,\n    Utils\n} from '../../declarations';\n\n/**\n * Contains methods to convert JSON-LD representing resources and properties to classes.\n * These methods works only for instances of resources and properties, not for ontologies (data model).\n */\nexport module ConvertJSONLD {\n\n    /**\n     * Function to be passed to a filter used on an array of property names\n     * sorting out all non value property names.\n     *\n     * Gets all property names that refer to value objects.\n     *\n     * @param propName the name of a property to be checked.\n     * @returns boolean - indicating if the name refers to a value property.\n     */\n    const getPropertyNames = (propName) => {\n        return propName !== '@id'\n            && propName !== '@type'\n            && propName !== KnoraConstants.RdfsLabel\n            && propName !== KnoraConstants.attachedToProject\n            && propName !== KnoraConstants.attachedToUser\n            && propName !== KnoraConstants.creationDate\n            && propName !== KnoraConstants.lastModificationDate\n            && propName !== KnoraConstants.hasPermissions;\n    };\n\n\n    /**\n     * Constructs a [[ReadResource]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an a resource and its properties serialized as JSON-LD.\n     * @returns ReadResource\n     */\n    function constructReadResource(resourceJSONLD: object): ReadResource {\n\n        const properties: ReadProperties = constructReadProperties(resourceJSONLD);\n\n        return new ReadResource(\n            resourceJSONLD['@id'],\n            resourceJSONLD['@type'],\n            resourceJSONLD[KnoraConstants.RdfsLabel],\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            [], // to be updated once another request has been made\n            properties\n        );\n    }\n\n    /**\n     * Constructs a [[ReadPropertyItem]] from JSON-LD,\n     * taking into account the property's value type.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {Object} propValue the value serialized as JSON-LD.\n     * @param {string} propIri the Iri of the property.\n     * @param {ReadLinkValue[]} standoffLinkValues standoffLinkValues of the resource. Text values may contain links to other resources.\n     * @returns a [[ReadPropertyItem]] or `undefined` in case the value could not be processed correctly.\n     */\n    function createValueSpecificProp(\n        propValue: Object, propIri: string, standoffLinkValues: ReadLinkValue[]): ReadPropertyItem | undefined {\n\n        // convert a JSON-LD property value to a `ReadPropertyItem`\n\n        let valueSpecificProp: ReadPropertyItem;\n\n        // check for the property's value type\n        switch (propValue['@type']) {\n            case KnoraConstants.TextValue:\n                // a text value might be given as plain string, html or xml.\n                let textValue: ReadPropertyItem;\n\n                if (propValue[KnoraConstants.valueAsString] !== undefined) {\n                    textValue = new ReadTextValueAsString(propValue['@id'], propIri, propValue[KnoraConstants.valueAsString]);\n                } else if (propValue[KnoraConstants.textValueAsHtml] !== undefined) {\n\n                    const referredResources: ReferredResourcesByStandoffLink = {};\n\n                    // check for standoff links and include referred resources, if any\n                    // when the user interacts with a standoff link, further information about the referred resource can be shown\n                    for (const standoffLink of standoffLinkValues) {\n                        const referredRes: ReadResource = standoffLink.referredResource;\n                        referredResources[referredRes.id] = referredRes;\n                    }\n\n                    textValue = new ReadTextValueAsHtml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsHtml], referredResources\n                    );\n                } else if (\n                    propValue[KnoraConstants.textValueAsXml] !== undefined && propValue[KnoraConstants.textValueHasMapping]['@id'] !== undefined) {\n                    textValue = new ReadTextValueAsXml(\n                        propValue['@id'], propIri, propValue[KnoraConstants.textValueAsXml], propValue[KnoraConstants.textValueHasMapping]['@id']\n                    );\n                } else {\n                    // expected text value members not defined\n                    console.error('ERROR: Invalid text value: ' + JSON.stringify(propValue));\n                }\n\n                valueSpecificProp = textValue;\n                break;\n\n            case KnoraConstants.DateValue:\n                const dateValue = new ReadDateValue(propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.dateValueHasCalendar],\n                    propValue[KnoraConstants.dateValueHasStartYear],\n                    propValue[KnoraConstants.dateValueHasEndYear],\n                    propValue[KnoraConstants.dateValueHasStartEra],\n                    propValue[KnoraConstants.dateValueHasEndEra],\n                    propValue[KnoraConstants.dateValueHasStartMonth],\n                    propValue[KnoraConstants.dateValueHasEndMonth],\n                    propValue[KnoraConstants.dateValueHasStartDay],\n                    propValue[KnoraConstants.dateValueHasEndDay]);\n\n                valueSpecificProp = dateValue;\n                break;\n\n            case KnoraConstants.LinkValue:\n\n                let linkValue: ReadLinkValue;\n\n                // check if the referred resource is given as an object or just as an IRI\n                if (propValue[KnoraConstants.linkValueHasTarget] !== undefined) {\n                    // linkValueHasTarget contains the object\n\n                    const referredResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasTarget]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResource.id, referredResource);\n                } else if (propValue[KnoraConstants.linkValueHasTargetIri] !== undefined) {\n                    // linkValueHasTargetIri contains the resource's Iri\n\n                    const referredResourceIri = propValue[KnoraConstants.linkValueHasTargetIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, referredResourceIri);\n                } else if (propValue[KnoraConstants.linkValueHasSource] !== undefined) {\n                    // linkValueHasSource contains the object\n\n                    const incomingResource: ReadResource = constructReadResource(propValue[KnoraConstants.linkValueHasSource]);\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResource.id, incomingResource);\n                } else if (propValue[KnoraConstants.linkValueHasSourceIri] !== undefined) {\n                    // linkValueHasSourceIri contains the resource's Iri\n\n                    const incomingResourceIri = propValue[KnoraConstants.linkValueHasSourceIri]['@id'];\n\n                    linkValue = new ReadLinkValue(propValue['@id'], propIri, incomingResourceIri);\n                }\n\n                valueSpecificProp = linkValue;\n                break;\n\n            case KnoraConstants.IntValue:\n\n                const intValue = new ReadIntegerValue(propValue['@id'], propIri, propValue[KnoraConstants.integerValueAsInteger]);\n                valueSpecificProp = intValue;\n\n                break;\n\n            case KnoraConstants.DecimalValue:\n\n                // a decimal value is represented as a string in order to preserve its precision\n                const decVal: number = parseFloat(propValue[KnoraConstants.decimalValueAsDecimal]['@value']);\n\n                const decimalValue = new ReadDecimalValue(propValue['@id'], propIri, decVal);\n                valueSpecificProp = decimalValue;\n\n                break;\n\n            case KnoraConstants.StillImageFileValue:\n\n                const stillImageFileValue: ReadStillImageFileValue = new ReadStillImageFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.stillImageFileValueHasIIIFBaseUrl]['@value'],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value'],\n                    propValue[KnoraConstants.stillImageFileValueHasDimX],\n                    propValue[KnoraConstants.stillImageFileValueHasDimY]\n                );\n\n                valueSpecificProp = stillImageFileValue;\n\n                break;\n\n            case KnoraConstants.TextFileValue:\n\n                const textFileValue = new ReadTextFileValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.fileValueHasFilename],\n                    propValue[KnoraConstants.fileValueAsUrl]['@value']\n                );\n\n                valueSpecificProp = textFileValue;\n\n                break;\n\n            case KnoraConstants.ColorValue:\n\n                const readColorValue: ReadColorValue = new ReadColorValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.colorValueAsColor]\n                );\n\n                valueSpecificProp = readColorValue;\n\n                break;\n\n            case KnoraConstants.GeomValue:\n\n                const readGeomValue: ReadGeomValue = new ReadGeomValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.geometryValueAsGeometry]\n                );\n\n                valueSpecificProp = readGeomValue;\n\n                break;\n\n            case KnoraConstants.UriValue:\n\n                const uriValue: ReadUriValue = new ReadUriValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.uriValueAsUri]['@value']\n                );\n\n                valueSpecificProp = uriValue;\n\n                break;\n\n            case KnoraConstants.BooleanValue:\n\n                const boolValue: ReadBooleanValue = new ReadBooleanValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.booleanValueAsBoolean]\n                );\n\n                valueSpecificProp = boolValue;\n\n                break;\n\n\n            case KnoraConstants.IntervalValue:\n\n                // represented as strings to preserve precision\n                const intStart = parseFloat(propValue[KnoraConstants.intervalValueHasStart]['@value']);\n                const intEnd = parseFloat(propValue[KnoraConstants.intervalValueHasEnd]['@value']);\n\n                const intervalValue: ReadIntervalValue = new ReadIntervalValue(\n                    propValue['@id'],\n                    propIri,\n                    intStart,\n                    intEnd\n                );\n\n                valueSpecificProp = intervalValue;\n\n                break;\n\n            case KnoraConstants.ListValue:\n\n                const listValue: ReadListValue = new ReadListValue(\n                    propValue['@id'],\n                    propIri,\n                    propValue[KnoraConstants.listValueAsListNode]['@id'],\n                    propValue[KnoraConstants.listValueAsListNodeLabel]\n                );\n\n                valueSpecificProp = listValue;\n\n                break;\n\n            default:\n                // unsupported value type\n                console.error('ERROR: value type not implemented yet: ' + propValue['@type']);\n                break;\n        }\n\n        return valueSpecificProp;\n\n    }\n\n\n    /**\n     * Construct a [[ReadProperties]] from JSON-LD.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD an object describing the resource and its properties.\n     * @returns ReadProperties\n     */\n    function constructReadProperties(resourceJSONLD: object): ReadProperties {\n\n        // JSON-LD representing standoff link values\n        // text values may contain standoff links\n        const standoffLinkValuesJSONLD: Object = resourceJSONLD[KnoraConstants.hasStandoffLinkToValue];\n\n        // to be populated with standoff link values\n        const standoffLinkValues: ReadLinkValue[] = [];\n\n        // convert each standoff link value JSON-LD object to a ReadLinkValue\n        // in order populate the collection with all the standoff link values\n        if (standoffLinkValuesJSONLD !== undefined && Array.isArray(standoffLinkValuesJSONLD)) {\n            for (const standoffLinkJSONLD of standoffLinkValuesJSONLD) {\n                const standoffVal: ReadLinkValue = createValueSpecificProp(\n                    standoffLinkJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n                ) as ReadLinkValue;\n\n                standoffLinkValues.push(standoffVal);\n            }\n        } else if (standoffLinkValuesJSONLD !== undefined) {\n            const standoffVal = createValueSpecificProp(\n                standoffLinkValuesJSONLD, KnoraConstants.hasStandoffLinkToValue, []\n            ) as ReadLinkValue;\n\n            standoffLinkValues.push(standoffVal);\n        }\n\n        let propNames = Object.keys(resourceJSONLD);\n\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const properties: ReadProperties = {};\n\n        // iterate over all the given property names\n        for (const propName of propNames) {\n\n            const propValues: Array<ReadPropertyItem> = [];\n\n            // either an array of values or just one value is given\n            if (Array.isArray(resourceJSONLD[propName])) {\n                // array of values\n\n                // for each property name, an array of property values is given, iterate over it\n                for (const propValue of resourceJSONLD[propName]) {\n\n                    // convert a JSON-LD property value to a `ReadPropertyItem`\n                    const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(propValue, propName, standoffLinkValues);\n\n                    // if it is undefined, the value could not be constructed correctly\n                    // add the property value to the array of property values\n                    if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n\n                }\n            } else {\n                // only one value\n\n                const valueSpecificProp: ReadPropertyItem = createValueSpecificProp(resourceJSONLD[propName], propName, standoffLinkValues);\n\n                // if it is undefined, the value could not be constructed correctly\n                // add the property value to the array of property values\n                if (valueSpecificProp !== undefined) propValues.push(valueSpecificProp);\n            }\n\n            // add the property to the properties object\n            properties[propName] = propValues;\n\n        }\n\n        return properties;\n    }\n\n    /**\n     * Turns an API response in JSON-LD representing a sequence of resources into a [[ReadResourcesSequence]].\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourcesResponseJSONLD a resource or a sequence of resources, represented as a JSON-LD object.\n     * @returns ReadResourcesSequence - sequence of read resources\n     */\n    export function createReadResourcesSequenceFromJsonLD(resourcesResponseJSONLD: object): ReadResourcesSequence {\n\n        const resources: Array<ReadResource> = [];\n        let numberOfResources: number;\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n            numberOfResources = resourcesGraph.length;\n\n            for (const resourceJSONLD of resourcesGraph) {\n\n                const resource: ReadResource = constructReadResource(resourceJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        } else {\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                // empty answer, no resources given\n                numberOfResources = 0;\n            } else {\n\n                // only one resource\n                numberOfResources = 1;\n\n                const resource: ReadResource = constructReadResource(resourcesResponseJSONLD);\n\n                // add the resource to the resources array\n                resources.push(resource);\n            }\n        }\n\n        return new ReadResourcesSequence(resources, numberOfResources);\n\n    }\n\n    /**\n     * Collects all the types (classes) of referred resources from a given resource (from its linking properties).\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param {object} resourceJSONLD JSON-LD describing one resource.\n     * @return string[] - an Array of resource class Iris (including duplicates).\n     */\n    function getReferredResourceClasses(resourceJSONLD: object): string[] {\n\n        let propNames = Object.keys(resourceJSONLD);\n        // filter out everything that is not a Knora property name\n        propNames = propNames.filter(getPropertyNames);\n\n        const referredResourceClasses = [];\n\n        for (const prop of propNames) {\n\n            // several values given for this property\n            if (Array.isArray(resourceJSONLD[prop])) {\n\n                for (const referredRes of resourceJSONLD[prop]) {\n\n                    // if the property is a LinkValue and it contains an embedded resource, get its type\n                    if (referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasTarget] !== undefined) {\n\n                        // target resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasTarget]['@type']);\n                    } else if (\n                        referredRes['@type'] === KnoraConstants.LinkValue && referredRes[KnoraConstants.linkValueHasSource] !== undefined) {\n                        // source resource is represented\n                        referredResourceClasses.push(referredRes[KnoraConstants.linkValueHasSource]['@type']);\n                    }\n\n                }\n            } else {\n                // only one value given for this property\n\n                // if the property is a LinkValue and it contains an embedded resource, get its type\n                if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]\n                    !== undefined) {\n\n                    // target resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasTarget]['@type']);\n                } else if (\n                    resourceJSONLD[prop]['@type']\n                    === KnoraConstants.LinkValue && resourceJSONLD[prop][KnoraConstants.linkValueHasSource]\n                    !== undefined) {\n                    // source resource is represented\n                    referredResourceClasses.push(resourceJSONLD[prop][KnoraConstants.linkValueHasSource]['@type']);\n                }\n            }\n\n        }\n\n        return referredResourceClasses;\n\n    }\n\n    /**\n     * Gets the resource types (classes) from a JSON-LD representing a sequence of resources.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param resourcesResponseJSONLD a sequence of resources, represented as a JSON-LD object.\n     * @returns string[] - the resource class Iris (without duplicates).\n     */\n    export function getResourceClassesFromJsonLD(resourcesResponseJSONLD: object): string[] {\n\n        const resourcesGraph = resourcesResponseJSONLD['@graph'];\n        let resourceClasses: Array<string> = [];\n\n        // either an array of resources or just one resource is given\n        if (resourcesGraph !== undefined) {\n            // an array of resources\n\n            for (const resourceJSONLD of resourcesGraph) {\n                // get class of the current resource\n                resourceClasses.push(resourceJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourceJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n\n            }\n\n        } else {\n            // only one resource\n\n            if (Object.keys(resourcesResponseJSONLD).length === 0) {\n                return [];\n            } else {\n                resourceClasses.push(resourcesResponseJSONLD['@type']);\n\n                // get the classes of referred resources\n                const referredResourceClasses = getReferredResourceClasses(resourcesResponseJSONLD);\n\n                resourceClasses = resourceClasses.concat(referredResourceClasses);\n            }\n        }\n\n        // filter out duplicates\n        return resourceClasses.filter(Utils.filterOutDuplicates);\n\n    }\n\n    /**\n     * Turns a JSON-LD response to a count query into a `CountQueryResult`.\n     * Expects JSON-LD with all Iris fully expanded.\n     *\n     * @param countQueryJSONLD\n     * @returns {CountQueryResult}\n     */\n    export function createCountQueryResult(countQueryJSONLD: object) {\n        return new CountQueryResult(countQueryJSONLD[KnoraConstants.schemaNumberOfItems]);\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { ApiServiceError, ApiServiceResult, KuiCoreConfig, ReadResourcesSequence } from '../../declarations';\nimport { ApiService } from '../api.service';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\n\n/**\n * Requests representation of resources from Knora.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ResourceService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject('config') public config: KuiCoreConfig,\n                private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @returns Observable<ApiServiceResult>\n     */\n    getResource(iri): Observable<ApiServiceResult | ApiServiceError> {\n        return this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n    }\n\n    /**\n     * Given the Iri, requests the representation of a resource as a `ReadResourceSequence`.\n     *\n     * @param {string} iri Iri of the resource (not yet URL encoded).\n     * @return {Observable<ReadResourcesSequence>}\n     */\n    getReadResource(iri: string): Observable<ReadResourcesSequence | ApiServiceError> {\n        const res: Observable<ApiServiceResult | ApiServiceError> = this.httpGet('/v2/resources/' + encodeURIComponent(iri));\n\n        // TODO: handle case of an ApiServiceError\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                (resourceResponse: object) => {\n                    // convert JSON-LD into a ReadResourceSequence\n                    const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n                    // collect resource class Iris\n                    const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n                    // request information about resource classes\n                    return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n                        map(\n                            (ontoInfo: OntologyInformation) => {\n                                // add ontology information to ReadResourceSequence\n                                resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                                return resSeq;\n                            }\n                        )\n                    );\n                }\n            )\n        );\n    }\n\n    // TODO: post, put, delete\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Observable } from 'rxjs';\nimport { ApiServiceResult, CountQueryResult, KuiCoreConfig, ReadResourcesSequence } from '../../declarations';\nimport { ConvertJSONLD } from './convert-jsonld';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { OntologyCacheService, OntologyInformation } from './ontology-cache.service';\nimport {HttpClient, HttpParams} from '@angular/common/http';\n\n/**\n * Performs searches (fulltext or extended) and search count queries into Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class SearchService extends ApiService {\n\n    constructor(public http: HttpClient,\n                @Inject('config') public config: KuiCoreConfig,\n                private _ontologyCacheService: OntologyCacheService) {\n        super(http, config);\n    }\n\n    /**\n     * Converts a JSON-LD object to a `ReadResorceSequence`.\n     * To be passed as a function pointer (arrow notation required).\n     *\n     * @param {Object} resourceResponse\n     * @returns {Observable<ReadResourcesSequence>}\n     */\n    private convertJSONLDToReadResourceSequence: (resourceResponse: Object) => Observable<ReadResourcesSequence> = (resourceResponse: Object) => {\n        // convert JSON-LD into a ReadResourceSequence\n        const resSeq: ReadResourcesSequence = ConvertJSONLD.createReadResourcesSequenceFromJsonLD(resourceResponse);\n\n        // collect resource class Iris\n        const resourceClassIris: string[] = ConvertJSONLD.getResourceClassesFromJsonLD(resourceResponse);\n\n        // request information about resource classes\n        return this._ontologyCacheService.getResourceClassDefinitions(resourceClassIris).pipe(\n            map(\n                (ontoInfo: OntologyInformation) => {\n                    // add ontology information to ReadResourceSequence\n                    resSeq.ontologyInformation.updateOntologyInformation(ontoInfo);\n                    return resSeq;\n                }\n            )\n        );\n    };\n\n    /**\n     * Performs a fulltext search.\n     * TODO: mark as deprecated, use of `doFullTextSearchReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearch(searchTerm: string, offset: number = 0): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        return this.httpGet('/v2/search/' + searchTerm, httpParams);\n    }\n\n    /**\n     * Performs a fulltext search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {number} offset the offset to be used (for paging, first offset is 0).\n     * @returns Observable<ApiServiceResult>\n     */\n    doFullTextSearchReadResourceSequence(searchTerm: string, offset: number = 0): Observable<ReadResourcesSequence> {\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams = new HttpParams();\n\n        httpParams = httpParams.set('offset', offset.toString());\n\n        const res: Observable<any> = this.httpGet('/v2/search/' + searchTerm, httpParams);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            mergeMap(\n                // return Observable of ReadResourcesSequence\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs a fulltext search count query.\n     * TODO: mark as deprecated, use of `doFullTextSearchCountQueryCountQueryResult` recommended\n     *\n     * @param searchTerm the term to search for.\n     * @returns Observable<ApiServiceResult>\n     */\n    doFulltextSearchCountQuery(searchTerm: string): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        return this.httpGet('/v2/search/count/' + searchTerm);\n    }\n\n    /**\n     * Performs a fulltext search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @returns Observable<CountQueryResult>\n     */\n    doFullTextSearchCountQueryCountQueryResult(searchTerm: string): Observable<CountQueryResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearchCountQuery'));\n        }\n\n        const res = this.httpGet('/v2/search/count/' + searchTerm);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearch(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        return this.httpPost('/v2/searchextended', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search and turns the result into a `ReadResourceSequence`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchReadResourceSequence(gravsearchQuery: string): Observable<ReadResourcesSequence> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearch'));\n        }\n\n        const res = this.httpPost('/v2/searchextended', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n\n    /**\n     * Performs an extended search count query.\n     * TODO: mark as deprecated, use of `doExtendedSearchReadResourceSequence` recommended\n     *\n     * @param {string} gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQuery(gravsearchQuery: string): Observable<ApiServiceResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        return this.httpPost('/v2/searchextended/count', gravsearchQuery);\n    }\n\n    /**\n     * Performs an extended search count query and turns the result into a `CountQueryResult`.\n     *\n     * @param gravsearchQuery the Sparql query string to be sent to Knora.\n     * @returns Observable<ApiServiceResult>\n     */\n    doExtendedSearchCountQueryCountQueryResult(gravsearchQuery: string): Observable<CountQueryResult> {\n\n        if (gravsearchQuery === undefined || gravsearchQuery.length === 0) {\n            return Observable.create(observer => observer.error('No Sparql string given for call of SearchService.doExtendedSearchCountQuery'));\n        }\n\n        const res = this.httpPost('/v2/searchextended/count', gravsearchQuery);\n\n        return res.pipe(\n            mergeMap(\n                // this would return an Observable of a PromiseObservable -> combine them into one Observable\n                this.processJSONLD\n            ),\n            map(\n                // convert to a `CountQueryResult`\n                ConvertJSONLD.createCountQueryResult\n            )\n        );\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label.\n     * TODO: mark as deprecated, use of `searchByLabelReadResourceSequence` recommended\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {string} [resourceClassIRI] restrict search to given resource class.\n     * @param {string} [projectIri] restrict search to given project.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabel(searchTerm: string, resourceClassIRI?: string, projectIri?: string): Observable<ApiServiceResult> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        if (resourceClassIRI !== undefined) {\n            httpParams = httpParams.set('limitToResourceClass', resourceClassIRI);\n        }\n\n        if (projectIri !== undefined) {\n            httpParams = httpParams.set('limitToProject', projectIri);\n        }\n\n        // httpGet() expects only one argument, not 2\n        return this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n    }\n\n    /**\n     * Perform a search by a resource's rdfs:label and turns the results in a `ReadResourceSequence`.\n     *\n     * @param {string} searchTerm the term to search for.\n     * @param {string} [resourceClassIRI] restrict search to given resource class.\n     * @param {string} [projectIri] restrict search to given project.\n     * @returns Observable<ApiServiceResult>\n     */\n    searchByLabelReadResourceSequence(searchTerm: string, resourceClassIRI?: string, projectIri?: string): Observable<ReadResourcesSequence> {\n\n        if (searchTerm === undefined || searchTerm.length === 0) {\n            return Observable.create(observer => observer.error('No search term given for call of SearchService.doFulltextSearch'));\n        }\n\n        let httpParams: HttpParams = new HttpParams();\n\n        if (resourceClassIRI !== undefined) {\n            httpParams = httpParams.set('limitToResourceClass', resourceClassIRI);\n        }\n\n        if (projectIri !== undefined) {\n            httpParams = httpParams.set('limitToProject', projectIri);\n        }\n\n        const res = this.httpGet('/v2/searchbylabel/' + encodeURIComponent(searchTerm), httpParams);\n\n        return res.pipe(\n            mergeMap(\n                this.processJSONLD\n            ),\n            mergeMap(\n                this.convertJSONLDToReadResourceSequence\n            )\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SearchService } from './search.service';\nimport { ReadResourcesSequence } from '../../declarations';\n\n/**\n * Requests incoming information (regions, links, stillImageRepresentations) from Knora.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IncomingService extends SearchService {\n\n    /**\n    * Returns all incoming regions for a particular resource.\n    *\n    * @param {string} resourceIRI the Iri of the resource whose Incoming regions should be returned.\n    * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n    * @returns {Observable<any>}\n    */\n    getIncomingRegions(resourceIRI: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?region knora-api:isMainResource true .\n\n?region knora-api:hasGeometry ?geom .\n\n?region knora-api:hasComment ?comment .\n\n?region knora-api:hasColor ?color .\n} WHERE {\n?region a knora-api:Region .\n?region a knora-api:Resource .\n\n?region knora-api:isRegionOf <${resourceIRI}> .\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\n\n<${resourceIRI}> a knora-api:Resource .\n\n?region knora-api:hasGeometry ?geom .\nknora-api:hasGeometry knora-api:objectType knora-api:Geom .\n\n?geom a knora-api:Geom .\n\n?region knora-api:hasComment ?comment .\nknora-api:hasComment knora-api:objectType xsd:string .\n\n?comment a xsd:string .\n\n?region knora-api:hasColor ?color .\nknora-api:hasColor knora-api:objectType knora-api:Color .\n\n?color a knora-api:Color .\n} OFFSET ${offset}\n`;\n        // console.log('sparqlQueryStr ', sparqlQueryStr);\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n    /**\n     * Returns all the StillImageRepresentations for the given resource, if any.\n     * StillImageRepresentations link to the given resource via knora-base:isPartOf.\n     *\n     * @param {string} resourceIri the Iri of the resource whose StillImageRepresentations should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getStillImageRepresentationsForCompoundResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?page knora-api:isMainResource true .\n\n?page knora-api:seqnum ?seqnum .\n\n?page knora-api:hasStillImageFile ?file .\n} WHERE {\n\n?page a knora-api:StillImageRepresentation .\n?page a knora-api:Resource .\n\n?page knora-api:isPartOf <${resourceIri}> .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\n<${resourceIri}> a knora-api:Resource .\n\n?page knora-api:seqnum ?seqnum .\nknora-api:seqnum knora-api:objectType xsd:integer .\n\n?seqnum a xsd:integer .\n\n?page knora-api:hasStillImageFile ?file .\nknora-api:hasStillImageFile knora-api:objectType knora-api:File .\n\n?file a knora-api:File .\n\n} ORDER BY ?seqnum\nOFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n\n    }\n\n\n    /**\n     * Returns all incoming links for the given resource Iri but incoming regions and still image representations.\n     *\n     * @param {string} resourceIri the Iri of the resource whose incoming links should be returned.\n     * @param {number} offset the offset to be used for paging. 0 is the default and is used to get the first page of results.\n     * @returns {Observable<any>}\n     */\n    getIncomingLinksForResource(resourceIri: string, offset: number): Observable<ReadResourcesSequence> {\n        const sparqlQueryStr = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\n\nCONSTRUCT {\n?incomingRes knora-api:isMainResource true .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n} WHERE {\n\n?incomingRes a knora-api:Resource .\n\n?incomingRes ?incomingProp <${resourceIri}> .\n\n<${resourceIri}> a knora-api:Resource .\n\n?incomingProp knora-api:objectType knora-api:Resource .\n\nknora-api:isRegionOf knora-api:objectType knora-api:Resource .\nknora-api:isPartOf knora-api:objectType knora-api:Resource .\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isRegionOf <${resourceIri}> .\n}\n\nFILTER NOT EXISTS {\n ?incomingRes  knora-api:isPartOf <${resourceIri}> .\n}\n\n} OFFSET ${offset}\n`;\n\n        return this.doExtendedSearchReadResourceSequence(sparqlQueryStr);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n\n/**\n * Represents the parameters of an extended search.\n */\nexport class ExtendedSearchParams {\n\n    /**\n     *\n     * @param generateGravsearch a function that generates a Gravsearch query.\n     *\n     *                           The function takes the offset\n     *                           as a parameter and returns a Gravsearch query string.\n     *                           Returns false if not set correctly (init state).\n     */\n    constructor(public generateGravsearch: (offset: number) => string | boolean) {\n\n    }\n\n}\n\n@Injectable({\n    providedIn: 'root'\n})\n/**\n * Temporarily stores the parameters of an extended search.\n */\nexport class SearchParamsService {\n\n    private _currentSearchParams;\n\n    constructor() {\n        // init with a dummy function that returns false\n        // if the application is reloaded, this will be returned\n        this._currentSearchParams = new BehaviorSubject<ExtendedSearchParams>(new ExtendedSearchParams((offset: number) => false));\n    }\n\n    /**\n     * Updates the parameters of an extended search.\n     *\n     * @param {ExtendedSearchParams} searchParams\n     * @returns void\n     */\n    changeSearchParamsMsg(searchParams: ExtendedSearchParams): void {\n        this._currentSearchParams.next(searchParams);\n    }\n\n    /**\n     * Gets the search params of an extended search.\n     *\n     * @returns ExtendedSearchParams - search parameters\n     */\n    getSearchParams(): ExtendedSearchParams {\n        return this._currentSearchParams.getValue();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ExtendedSearchParams, SearchParamsService } from './search-params.service';\nimport { KnoraConstants, KnoraSchema, Utils } from '../../declarations';\nimport { PropertyWithValue } from '../../declarations/api/operators';\n\n/**\n * @ignore\n * Represents an error that occurred when generating KnarQL.\n */\nclass GravsearchGenerationError extends Error {\n\n    constructor(msg: string) {\n        super(msg);\n    }\n}\n\n/**\n * Create GravSearch queries from provided parameters.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class GravsearchGenerationService {\n\n    /**\n     * @ignore\n     *\n     * Map of complex knora-api value types to simple ones.\n     * Use computed property name: http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer.\n     */\n    public static typeConversionComplexToSimple = {\n        'http://api.knora.org/ontology/knora-api/v2#IntValue': KnoraConstants.xsdInteger,\n        'http://api.knora.org/ontology/knora-api/v2#DecimalValue': KnoraConstants.xsdDecimal,\n        'http://api.knora.org/ontology/knora-api/v2#BooleanValue': KnoraConstants.xsdBoolean,\n        'http://api.knora.org/ontology/knora-api/v2#TextValue': KnoraConstants.xsdString,\n        'http://api.knora.org/ontology/knora-api/v2#DateValue': KnoraConstants.dateSimple,\n        'http://api.knora.org/ontology/knora-api/v2#IntervalValue': KnoraConstants.intervalSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeomValue': KnoraConstants.geomSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ColorValue': KnoraConstants.colorSimple,\n        'http://api.knora.org/ontology/knora-api/v2#GeonameValue': KnoraConstants.geonameSimple,\n        'http://api.knora.org/ontology/knora-api/v2#UriValue': KnoraConstants.xsdUri,\n        'http://api.knora.org/ontology/knora-api/v2#StillImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#FileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#MovingImageFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DDDFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#AudioFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#DocumentFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#TextFileValue': KnoraConstants.fileSimple,\n        'http://api.knora.org/ontology/knora-api/v2#ListValue': KnoraConstants.xsdString\n    };\n\n    constructor(private _searchParamsService: SearchParamsService) { }\n\n    /**\n       * @private\n       * Converts a complex type Iri to a simple type Iri.\n       *\n       * @param {string} complexType the Iri of a value type (knora-api complex).\n       * @returns string - the corresponding Iri of the simple type (knora-api simple).\n       */\n    private convertComplexTypeToSimpleType(complexType: string): string {\n\n        const simpleType: string = GravsearchGenerationService.typeConversionComplexToSimple[complexType];\n\n        if (simpleType !== undefined) {\n            return simpleType;\n        } else {\n            throw new GravsearchGenerationError(`complex type ${complexType} could not be converted to simple type.`);\n        }\n\n    }\n\n    /**\n     * Generates a Gravsearch query from the provided arguments.\n     *\n     * @param {PropertyWithValue[]} properties the properties specified by the user.\n     * @param {string} [mainResourceClassOption] the class of the main resource, if specified.\n     * @param {number} offset the offset to be used (nth page of results).\n     * @returns string - a KnarQL query string.\n     */\n    createGravsearchQuery(properties: PropertyWithValue[], mainResourceClassOption?: string, offset: number = 0): string {\n\n        // class restriction for the resource searched for\n        let mainResourceClass = '';\n\n        // if given, create the class restriction for the main resource\n        if (mainResourceClassOption !== undefined) {\n            mainResourceClass = `?mainRes a <${Utils.convertComplexKnoraApiEntityIritoSimple(mainResourceClassOption)}> .`;\n        }\n\n        // criteria for the order by statement\n        const orderByCriteria = [];\n\n        // statements to be returned in query results\n        const returnStatements = [];\n\n        // loop over given properties and create statements and Filters and type annotations from them\n        const props: string[] = properties.map(\n            (propWithVal: PropertyWithValue, index: number) => {\n\n                const propIriSimple = Utils.convertComplexKnoraApiEntityIritoSimple(propWithVal.property.id);\n\n                let simpleType;\n                if (!propWithVal.property.isLinkProperty) {\n                    simpleType = this.convertComplexTypeToSimpleType(propWithVal.property.objectType);\n                } else {\n                    simpleType = KnoraConstants.resourceSimple;\n                }\n\n                // represents the object of a statement\n                let propValue;\n                if (!propWithVal.property.isLinkProperty || propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Exists') {\n                    // it is not a linking property, create a variable for the value (to be used by a subsequent FILTER)\n                    // OR the comparison operator Exists is used in which case we do not need to specify the object any further\n                    propValue = `?propVal${index}`;\n                } else {\n                    // it is a linking property and the comparison operator is not Exists, use its IRI\n                    propValue = propWithVal.valueLiteral.value.toSparql(KnoraSchema.simple);\n                }\n\n                // generate statement\n                let statement: string = `?mainRes <${propIriSimple}> ${propValue} .`;\n\n                // type annotations\n                const propTypeAnnotation = `<${propIriSimple}> knora-api:objectType <${simpleType}> .`;\n                const propValueAnnotation = `${propValue} a <${simpleType}> .`;\n\n                // check if it is a linking property that has to be wrapped in a FILTER NOT EXISTS (comparison operator NOT_EQUALS) to negate it\n                if (propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() === 'NotEquals') {\n                    // do not include statement in results, because the query checks for the absence of this statement\n                    statement = `FILTER NOT EXISTS {\n${statement}\n${propTypeAnnotation}\n${propValueAnnotation}\n}`;\n                } else {\n                    // TODO: check if statement should be returned returned in results (Boolean flag from checkbox)\n                    returnStatements.push(statement);\n                    statement = `\n${statement}\n${propTypeAnnotation}\n${propValueAnnotation}\n`;\n                }\n\n                // generate filter if comparison operator is not Exists\n                let filter: string = '';\n                // only create a FILTER if the comparison operator is not EXISTS and it is not a linking property\n                if (!propWithVal.property.isLinkProperty && propWithVal.valueLiteral.comparisonOperator.getClassName() !== 'Exists') {\n\n                    if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Like') {\n                        // use regex function for LIKE\n                        filter = `FILTER regex(${propValue}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.simple)}, \"i\")`;\n                    } else if (propWithVal.valueLiteral.comparisonOperator.getClassName() === 'Match') {\n                        // use contains function for MATCH\n                        filter = `FILTER <${KnoraConstants.matchFunction}>(${propValue}, ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.simple)})`;\n                    } else {\n                        filter = `FILTER(${propValue} ${propWithVal.valueLiteral.comparisonOperator.type} ${propWithVal.valueLiteral.value.toSparql(KnoraSchema.simple)})`;\n                    }\n                }\n\n                // check if current value is a sort criterion\n                if (propWithVal.isSortCriterion) orderByCriteria.push(propValue);\n\n                return `${statement}\n${filter}\n`;\n\n            });\n\n        let orderByStatement = '';\n\n        if (orderByCriteria.length > 0) {\n            orderByStatement = `\nORDER BY ${orderByCriteria.join(' ')}\n`;\n        }\n\n        // template of the KnarQL query with dynamic components\n        const gravsearchTemplate = `\nPREFIX knora-api: <http://api.knora.org/ontology/knora-api/simple/v2#>\nCONSTRUCT {\n\n?mainRes knora-api:isMainResource true .\n\n${returnStatements.join('\\n')}\n\n} WHERE {\n\n?mainRes a knora-api:Resource .\n\n${mainResourceClass}\n\n${props.join('')}\n\n}\n${orderByStatement}`;\n\n        // offset component of the KnarQL query\n        const offsetTemplate = `\nOFFSET ${offset}\n`;\n\n        // function that generates the same KnarQL query with the given offset\n        const generateGravsearchQueryWithCustomOffset = (localOffset: number): string => {\n            const offsetCustomTemplate = `\nOFFSET ${localOffset}\n`;\n\n            return gravsearchTemplate + offsetCustomTemplate;\n        };\n\n        if (offset === 0) {\n            // store the function so another KnarQL query can be created with an increased offset\n            this._searchParamsService.changeSearchParamsMsg(new ExtendedSearchParams(generateGravsearchQueryWithCustomOffset));\n        }\n\n        // console.log(knarqlTemplate + offsetTemplate);\n\n        return gravsearchTemplate + offsetTemplate;\n\n    }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { KuiCoreConfig, RdfDataObject, ResetTriplestoreContentResponse } from '../../declarations';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n\n  constructor(private http: HttpClient, @Inject('config') public config: KuiCoreConfig) { }\n\n  /**\n     * Resets the content of the triplestore.\n     *\n     * @param rdfDataObjects\n     * @returns Observable<string>\n     */\n  resetTriplestoreContent(rdfDataObjects: RdfDataObject[]): Observable<string> {\n\n    return this.http.post<ResetTriplestoreContentResponse>(this.config.api + '/admin/store/ResetTriplestoreContent', rdfDataObjects)\n      .pipe(\n        map(\n          (data) => {\n            const result: ResetTriplestoreContentResponse = data;\n            // console.log('StoreService - resetTriplestoreContent: ', result);\n            return result.message;\n          },\n          (error: HttpErrorResponse) => {\n            if (error.error instanceof Error) {\n              console.log('StoreService - resetTriplestoreContent - Client-side error occurred.', error);\n            } else {\n              console.log('StoreService - resetTriplestoreContent - Server-side error occurred.', error);\n            }\n            throw error;\n          }\n        ));\n\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasicOntologyService extends ApiService {\n\n  /**\n     * returns our list of a basic ontology\n     *\n     * @returns {Observable<any>}\n     */\n  // getBasicOntology(): Observable<any> {\n  //     let url = environment.url;\n  //     return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  // }\n  getBasicOntology(): Observable<any> {\n    const url = this.config.app;\n    return this.httpGet(url + '/data/base-data/basic-ontology.json');\n    // return this.httpGet(url + '/data/base-data/basic-ontology.json', {withCredentials: false});\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '../api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceTypesService extends ApiService {\n\n  /**\n     * Get all resource types defined by the vocabulary.\n     *\n     * @param {string} iri Vocabulary iri\n     * @returns Observable<any>\n     */\n  getResourceTypesByVoc(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes?vocabulary=' + encodeURIComponent(iri));\n  }\n\n  /**\n   * Get a specific resource type.\n   *\n   * @param {string} iri resource type iri\n   * @returns Observable<any>\n   */\n  getResourceType(iri: string): Observable<any> {\n    return this.httpGet('/v1/resourcetypes/' + encodeURIComponent(iri));\n  }\n\n\n  // putResourceType(iri)\n\n}\n","import { KnoraConstants, KnoraSchema } from './knora-constants';\nimport { GravsearchGenerationService, Property } from '../../services';\n\n\n/**\n * An abstract interface representing a comparison operator.\n * This interface is implemented for the supported comparison operators.\n */\nexport interface ComparisonOperator {\n\n    // type of comparison operator\n    type: string;\n\n    // the label of the comparison operator to be presented to the user.\n    label: string;\n\n    // returns the class name when called on an instance\n    getClassName(): string;\n}\n\nexport class Equals implements ComparisonOperator {\n\n    type = KnoraConstants.EqualsComparisonOperator;\n    label = KnoraConstants.EqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Equals';\n    }\n}\n\n\nexport class NotEquals implements ComparisonOperator {\n\n    type = KnoraConstants.NotEqualsComparisonOperator;\n    label = KnoraConstants.NotEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'NotEquals';\n    }\n}\n\nexport class GreaterThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanEqualsComparisonOperator;\n    label = KnoraConstants.GreaterThanEqualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThanEquals';\n    }\n}\n\nexport class GreaterThan implements ComparisonOperator {\n\n    type = KnoraConstants.GreaterThanComparisonOperator;\n    label = KnoraConstants.GreaterThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'GreaterThan';\n    }\n}\n\nexport class LessThan implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanComparisonOperator;\n    label = KnoraConstants.LessThanComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThan';\n    }\n}\n\nexport class LessThanEquals implements ComparisonOperator {\n\n    type = KnoraConstants.LessThanEqualsComparisonOperator;\n    label = KnoraConstants.LessThanQualsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'LessThanEquals';\n    }\n}\n\n\nexport class Exists implements ComparisonOperator {\n\n    type = KnoraConstants.ExistsComparisonOperator;\n    label = KnoraConstants.ExistsComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Exists';\n    }\n}\n\nexport class Like implements ComparisonOperator {\n\n    type = KnoraConstants.LikeComparisonOperator;\n    label = KnoraConstants.LikeComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Like';\n    }\n\n}\n\nexport class Match implements ComparisonOperator {\n\n    type = KnoraConstants.MatchComparisonOperator;\n    label = KnoraConstants.MatchComparisonLabel;\n\n    constructor() {\n    }\n\n    getClassName() {\n        return 'Match';\n    }\n\n}\n\n/**\n * Combination of a comparison operator and a value literal or an IRI.\n * In case the comparison operator is 'Exists', no value is given.\n */\nexport class ComparisonOperatorAndValue {\n\n    constructor(readonly comparisonOperator: ComparisonOperator, readonly value?: Value) {\n    }\n}\n\n/**\n * An abstract interface representing a value: an IRI or a literal.\n */\nexport interface Value {\n\n    /**\n     * Turns the value into a SPARQL string representation.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string} SPARQL representation of the value.\n     */\n    toSparql(schema: KnoraSchema): string;\n\n}\n\n/**\n * Represents a property's value as a literal with the indication of its type.\n */\nexport class ValueLiteral implements Value {\n\n    /**\n     * Constructs a [ValueLiteral].\n     *\n     * @param {string} value the literal representation of the value.\n     * @param {string} type the type of the value (making use of xsd).\n     */\n    constructor(\n        public readonly value: string,\n        public readonly type: string) {\n    }\n\n\n    /**\n     * Creates a type annotated value literal to be used in a SPARQL query.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n\n        let literalType: string;\n\n        // check if a Knora schema conversion is necessary, e.g., knora-api:dateValue (complex) to knora-api:date (simple).\n        // xsd types will remain unchanged\n        if (schema === KnoraSchema.simple && GravsearchGenerationService.typeConversionComplexToSimple[this.type] !== undefined) {\n            // convert to simple schema\n            literalType = GravsearchGenerationService.typeConversionComplexToSimple[this.type];\n        } else {\n            // do not convert\n            literalType = this.type;\n        }\n\n        return `\"${this.value}\"^^<${literalType}>`;\n    }\n\n}\n\n/**\n * Represents an IRI.\n */\nexport class IRI implements Value {\n\n    /**\n     * Constructs an [IRI].\n     *\n     * @param {string} iri the IRI of a resource instance.\n     */\n    constructor(readonly iri: string) {\n    }\n\n    /**\n     * Creates a SPARQL representation of the IRI.\n     *\n     * @param schema indicates the Knora schema to be used.\n     * @returns {string}\n     */\n    public toSparql(schema: KnoraSchema): string {\n        // this is an instance Iri and does not have to be converted.\n        return `<${this.iri}>`;\n    }\n\n}\n\n/**\n * An abstract interface that represents a value.\n * This interface has to be implemented for all value types (value component classes).\n */\nexport interface PropertyValue {\n\n    /**\n     * Type of the value.\n     */\n    type: string;\n\n    /**\n     * Returns the value.\n     *\n     * @returns {Value}.\n     */\n    getValue(): Value;\n\n}\n\n/**\n * Represents a property, the specified comparison operator, and value.\n */\nexport class PropertyWithValue {\n\n    /**\n     * Constructs a [PropertyWithValue].\n     *\n     * @param {Property} property the specified property.\n     * @param {ComparisonOperatorAndValue} valueLiteral the specified comparison operator and value.\n     * @param isSortCriterion indicates if the property is used as a sort criterion.\n     */\n    constructor(\n        readonly property: Property,\n        readonly valueLiteral: ComparisonOperatorAndValue,\n        readonly isSortCriterion: Boolean) {\n    }\n\n}\n\n/**\n * a list, which is used in the mat-autocomplete form field\n * contains objects with id and name. the id is usual the iri\n */\nexport interface AutocompleteItem {\n    iri: string;\n    name: string;\n    label?: string;\n}\n\n"]}